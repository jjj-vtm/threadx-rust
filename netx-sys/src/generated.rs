/* automatically generated by rust-bindgen 0.69.5 */

pub type CHAR = ::core::ffi::c_char;
pub type UCHAR = ::core::ffi::c_uchar;
pub type UINT = ::core::ffi::c_uint;
pub type ULONG = ::core::ffi::c_ulong;
pub type USHORT = ::core::ffi::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TX_TIMER_INTERNAL_STRUCT {
    pub tx_timer_internal_remaining_ticks: ULONG,
    pub tx_timer_internal_re_initialize_ticks: ULONG,
    pub tx_timer_internal_timeout_function: ::core::option::Option<unsafe extern "C" fn(id: ULONG)>,
    pub tx_timer_internal_timeout_param: ULONG,
    pub tx_timer_internal_active_next: *mut TX_TIMER_INTERNAL_STRUCT,
    pub tx_timer_internal_active_previous: *mut TX_TIMER_INTERNAL_STRUCT,
    pub tx_timer_internal_list_head: *mut *mut TX_TIMER_INTERNAL_STRUCT,
}
pub type TX_TIMER_INTERNAL = TX_TIMER_INTERNAL_STRUCT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TX_TIMER_STRUCT {
    pub tx_timer_id: ULONG,
    pub tx_timer_name: *mut CHAR,
    pub tx_timer_internal: TX_TIMER_INTERNAL,
    pub tx_timer_created_next: *mut TX_TIMER_STRUCT,
    pub tx_timer_created_previous: *mut TX_TIMER_STRUCT,
}
pub type TX_TIMER = TX_TIMER_STRUCT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TX_THREAD_STRUCT {
    pub tx_thread_id: ULONG,
    pub tx_thread_run_count: ULONG,
    pub tx_thread_stack_ptr: *mut ::core::ffi::c_void,
    pub tx_thread_stack_start: *mut ::core::ffi::c_void,
    pub tx_thread_stack_end: *mut ::core::ffi::c_void,
    pub tx_thread_stack_size: ULONG,
    pub tx_thread_time_slice: ULONG,
    pub tx_thread_new_time_slice: ULONG,
    pub tx_thread_ready_next: *mut TX_THREAD_STRUCT,
    pub tx_thread_ready_previous: *mut TX_THREAD_STRUCT,
    pub tx_thread_name: *mut CHAR,
    pub tx_thread_priority: UINT,
    pub tx_thread_state: UINT,
    pub tx_thread_delayed_suspend: UINT,
    pub tx_thread_suspending: UINT,
    pub tx_thread_preempt_threshold: UINT,
    pub tx_thread_schedule_hook:
        ::core::option::Option<unsafe extern "C" fn(thread_ptr: *mut TX_THREAD_STRUCT, id: ULONG)>,
    pub tx_thread_entry: ::core::option::Option<unsafe extern "C" fn(id: ULONG)>,
    pub tx_thread_entry_parameter: ULONG,
    pub tx_thread_timer: TX_TIMER_INTERNAL,
    pub tx_thread_suspend_cleanup: ::core::option::Option<
        unsafe extern "C" fn(thread_ptr: *mut TX_THREAD_STRUCT, suspension_sequence: ULONG),
    >,
    pub tx_thread_suspend_control_block: *mut ::core::ffi::c_void,
    pub tx_thread_suspended_next: *mut TX_THREAD_STRUCT,
    pub tx_thread_suspended_previous: *mut TX_THREAD_STRUCT,
    pub tx_thread_suspend_info: ULONG,
    pub tx_thread_additional_suspend_info: *mut ::core::ffi::c_void,
    pub tx_thread_suspend_option: UINT,
    pub tx_thread_suspend_status: UINT,
    pub tx_thread_created_next: *mut TX_THREAD_STRUCT,
    pub tx_thread_created_previous: *mut TX_THREAD_STRUCT,
    pub tx_thread_filex_ptr: *mut ::core::ffi::c_void,
    pub tx_thread_user_priority: UINT,
    pub tx_thread_user_preempt_threshold: UINT,
    pub tx_thread_inherit_priority: UINT,
    pub tx_thread_owned_mutex_count: UINT,
    pub tx_thread_owned_mutex_list: *mut TX_MUTEX_STRUCT,
    pub tx_thread_stack_highest_ptr: *mut ::core::ffi::c_void,
    pub tx_thread_entry_exit_notify: ::core::option::Option<
        unsafe extern "C" fn(thread_ptr: *mut TX_THREAD_STRUCT, type_: UINT),
    >,
    pub tx_thread_suspension_sequence: ULONG,
}
pub type TX_THREAD = TX_THREAD_STRUCT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TX_EVENT_FLAGS_GROUP_STRUCT {
    pub tx_event_flags_group_id: ULONG,
    pub tx_event_flags_group_name: *mut CHAR,
    pub tx_event_flags_group_current: ULONG,
    pub tx_event_flags_group_reset_search: UINT,
    pub tx_event_flags_group_suspension_list: *mut TX_THREAD_STRUCT,
    pub tx_event_flags_group_suspended_count: UINT,
    pub tx_event_flags_group_created_next: *mut TX_EVENT_FLAGS_GROUP_STRUCT,
    pub tx_event_flags_group_created_previous: *mut TX_EVENT_FLAGS_GROUP_STRUCT,
    pub tx_event_flags_group_delayed_clear: ULONG,
    pub tx_event_flags_group_set_notify:
        ::core::option::Option<unsafe extern "C" fn(group_ptr: *mut TX_EVENT_FLAGS_GROUP_STRUCT)>,
}
pub type TX_EVENT_FLAGS_GROUP = TX_EVENT_FLAGS_GROUP_STRUCT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TX_MUTEX_STRUCT {
    pub tx_mutex_id: ULONG,
    pub tx_mutex_name: *mut CHAR,
    pub tx_mutex_ownership_count: UINT,
    pub tx_mutex_owner: *mut TX_THREAD,
    pub tx_mutex_inherit: UINT,
    pub tx_mutex_original_priority: UINT,
    pub tx_mutex_suspension_list: *mut TX_THREAD_STRUCT,
    pub tx_mutex_suspended_count: UINT,
    pub tx_mutex_created_next: *mut TX_MUTEX_STRUCT,
    pub tx_mutex_created_previous: *mut TX_MUTEX_STRUCT,
    pub tx_mutex_highest_priority_waiting: UINT,
    pub tx_mutex_owned_next: *mut TX_MUTEX_STRUCT,
    pub tx_mutex_owned_previous: *mut TX_MUTEX_STRUCT,
}
pub type TX_MUTEX = TX_MUTEX_STRUCT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TX_SEMAPHORE_STRUCT {
    pub tx_semaphore_id: ULONG,
    pub tx_semaphore_name: *mut CHAR,
    pub tx_semaphore_count: ULONG,
    pub tx_semaphore_suspension_list: *mut TX_THREAD_STRUCT,
    pub tx_semaphore_suspended_count: UINT,
    pub tx_semaphore_created_next: *mut TX_SEMAPHORE_STRUCT,
    pub tx_semaphore_created_previous: *mut TX_SEMAPHORE_STRUCT,
    pub tx_semaphore_put_notify:
        ::core::option::Option<unsafe extern "C" fn(semaphore_ptr: *mut TX_SEMAPHORE_STRUCT)>,
}
pub type TX_SEMAPHORE = TX_SEMAPHORE_STRUCT;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct NXD_ADDRESS_STRUCT {
    pub nxd_ip_version: ULONG,
    pub nxd_ip_address: NXD_ADDRESS_STRUCT__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union NXD_ADDRESS_STRUCT__bindgen_ty_1 {
    pub v4: ULONG,
}
pub type NXD_ADDRESS = NXD_ADDRESS_STRUCT;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct NX_PACKET_STRUCT {
    pub nx_packet_pool_owner: *mut NX_PACKET_POOL_STRUCT,
    pub nx_packet_next: *mut NX_PACKET_STRUCT,
    pub nx_packet_prepend_ptr: *mut UCHAR,
    pub nx_packet_append_ptr: *mut UCHAR,
    pub nx_packet_data_start: *mut UCHAR,
    pub nx_packet_data_end: *mut UCHAR,
    pub nx_packet_last: *mut NX_PACKET_STRUCT,
    pub nx_packet_queue_next: *mut NX_PACKET_STRUCT,
    pub nx_packet_union_next: NX_PACKET_STRUCT__bindgen_ty_1,
    pub nx_packet_length: ULONG,
    pub nx_packet_reassembly_time: ULONG,
    pub nx_packet_ip_version: UCHAR,
    pub nx_packet_identical_copy: UCHAR,
    pub nx_packet_ip_header_length: UCHAR,
    pub nx_packet_reserved: UCHAR,
    pub nx_packet_address: NX_PACKET_STRUCT__bindgen_ty_2,
    pub nx_packet_ip_header: *mut UCHAR,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union NX_PACKET_STRUCT__bindgen_ty_1 {
    pub nx_packet_tcp_queue_next: *mut NX_PACKET_STRUCT,
    pub nx_packet_fragment_next: *mut NX_PACKET_STRUCT,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union NX_PACKET_STRUCT__bindgen_ty_2 {
    pub nx_packet_interface_ptr: *mut NX_INTERFACE_STRUCT,
    pub nx_packet_ipv6_address_ptr: *mut NXD_IPV6_ADDRESS_STRUCT,
}
pub type NX_PACKET = NX_PACKET_STRUCT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NX_PACKET_POOL_STRUCT {
    pub nx_packet_pool_id: ULONG,
    pub nx_packet_pool_name: *mut CHAR,
    pub nx_packet_pool_available: ULONG,
    pub nx_packet_pool_total: ULONG,
    pub nx_packet_pool_empty_requests: ULONG,
    pub nx_packet_pool_empty_suspensions: ULONG,
    pub nx_packet_pool_invalid_releases: ULONG,
    pub nx_packet_pool_available_list: *mut NX_PACKET_STRUCT,
    pub nx_packet_pool_start: *mut CHAR,
    pub nx_packet_pool_size: ULONG,
    pub nx_packet_pool_payload_size: ULONG,
    pub nx_packet_pool_suspension_list: *mut TX_THREAD,
    pub nx_packet_pool_suspended_count: ULONG,
    pub nx_packet_pool_created_next: *mut NX_PACKET_POOL_STRUCT,
    pub nx_packet_pool_created_previous: *mut NX_PACKET_POOL_STRUCT,
}
pub type NX_PACKET_POOL = NX_PACKET_POOL_STRUCT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NX_ARP_STRUCT {
    pub nx_arp_route_static: UINT,
    pub nx_arp_entry_next_update: UINT,
    pub nx_arp_retries: UINT,
    pub nx_arp_pool_next: *mut NX_ARP_STRUCT,
    pub nx_arp_pool_previous: *mut NX_ARP_STRUCT,
    pub nx_arp_active_next: *mut NX_ARP_STRUCT,
    pub nx_arp_active_previous: *mut NX_ARP_STRUCT,
    pub nx_arp_active_list_head: *mut *mut NX_ARP_STRUCT,
    pub nx_arp_ip_address: ULONG,
    pub nx_arp_physical_address_msw: ULONG,
    pub nx_arp_physical_address_lsw: ULONG,
    pub nx_arp_ip_interface: *mut NX_INTERFACE_STRUCT,
    pub nx_arp_packets_waiting: *mut NX_PACKET_STRUCT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NX_UDP_SOCKET_STRUCT {
    pub nx_udp_socket_id: ULONG,
    pub nx_udp_socket_name: *mut CHAR,
    pub nx_udp_socket_port: UINT,
    pub nx_udp_socket_ip_ptr: *mut NX_IP_STRUCT,
    pub nx_udp_socket_packets_sent: ULONG,
    pub nx_udp_socket_bytes_sent: ULONG,
    pub nx_udp_socket_packets_received: ULONG,
    pub nx_udp_socket_bytes_received: ULONG,
    pub nx_udp_socket_invalid_packets: ULONG,
    pub nx_udp_socket_packets_dropped: ULONG,
    pub nx_udp_socket_checksum_errors: ULONG,
    pub nx_udp_socket_type_of_service: ULONG,
    pub nx_udp_socket_time_to_live: UINT,
    pub nx_udp_socket_fragment_enable: ULONG,
    pub nx_udp_socket_disable_checksum: UCHAR,
    pub nx_udp_socket_reserved: [UCHAR; 3usize],
    pub nx_udp_socket_receive_count: ULONG,
    pub nx_udp_socket_queue_maximum: ULONG,
    pub nx_udp_socket_receive_head: *mut NX_PACKET,
    pub nx_udp_socket_receive_tail: *mut NX_PACKET,
    pub nx_udp_socket_bound_next: *mut NX_UDP_SOCKET_STRUCT,
    pub nx_udp_socket_bound_previous: *mut NX_UDP_SOCKET_STRUCT,
    pub nx_udp_socket_bind_in_progress: *mut TX_THREAD,
    pub nx_udp_socket_receive_suspension_list: *mut TX_THREAD,
    pub nx_udp_socket_receive_suspended_count: ULONG,
    pub nx_udp_socket_bind_suspension_list: *mut TX_THREAD,
    pub nx_udp_socket_bind_suspended_count: ULONG,
    pub nx_udp_socket_created_next: *mut NX_UDP_SOCKET_STRUCT,
    pub nx_udp_socket_created_previous: *mut NX_UDP_SOCKET_STRUCT,
    pub nx_udp_receive_callback:
        ::core::option::Option<unsafe extern "C" fn(socket_ptr: *mut NX_UDP_SOCKET_STRUCT)>,
    pub nx_udp_socket_reserved_ptr: *mut ::core::ffi::c_void,
}
pub type NX_UDP_SOCKET = NX_UDP_SOCKET_STRUCT;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct NX_TCP_SOCKET_STRUCT {
    pub nx_tcp_socket_id: ULONG,
    pub nx_tcp_socket_name: *mut CHAR,
    pub nx_tcp_socket_client_type: UINT,
    pub nx_tcp_socket_port: UINT,
    pub nx_tcp_socket_mss: ULONG,
    pub nx_tcp_socket_connect_ip: NXD_ADDRESS,
    pub nx_tcp_socket_connect_port: UINT,
    pub nx_tcp_socket_connect_mss: ULONG,
    pub nx_tcp_socket_peer_mss: ULONG,
    pub nx_tcp_socket_connect_interface: *mut NX_INTERFACE_STRUCT,
    pub nx_tcp_socket_next_hop_address: ULONG,
    pub nx_tcp_socket_connect_mss2: ULONG,
    pub nx_tcp_socket_tx_slow_start_threshold: ULONG,
    pub nx_tcp_socket_state: UINT,
    pub nx_tcp_socket_tx_sequence: ULONG,
    pub nx_tcp_socket_rx_sequence: ULONG,
    pub nx_tcp_socket_rx_sequence_acked: ULONG,
    pub nx_tcp_socket_delayed_ack_timeout: ULONG,
    pub nx_tcp_socket_fin_sequence: ULONG,
    pub nx_tcp_socket_fin_received: USHORT,
    pub nx_tcp_socket_fin_acked: USHORT,
    pub nx_tcp_socket_tx_window_advertised: ULONG,
    pub nx_tcp_socket_tx_window_congestion: ULONG,
    pub nx_tcp_socket_tx_outstanding_bytes: ULONG,
    pub nx_tcp_socket_tx_sequence_recover: ULONG,
    pub nx_tcp_socket_previous_highest_ack: ULONG,
    pub nx_tcp_socket_ack_n_packet_counter: ULONG,
    pub nx_tcp_socket_duplicated_ack_received: UINT,
    pub nx_tcp_socket_rx_window_default: ULONG,
    pub nx_tcp_socket_rx_window_current: ULONG,
    pub nx_tcp_socket_rx_window_last_sent: ULONG,
    pub nx_tcp_socket_packets_sent: ULONG,
    pub nx_tcp_socket_bytes_sent: ULONG,
    pub nx_tcp_socket_packets_received: ULONG,
    pub nx_tcp_socket_bytes_received: ULONG,
    pub nx_tcp_socket_retransmit_packets: ULONG,
    pub nx_tcp_socket_checksum_errors: ULONG,
    pub nx_tcp_socket_zero_window_probe_failure: ULONG,
    pub nx_tcp_socket_zero_window_probe_sequence: ULONG,
    pub nx_tcp_socket_zero_window_probe_has_data: UCHAR,
    pub nx_tcp_socket_zero_window_probe_data: UCHAR,
    pub nx_tcp_socket_fast_recovery: UCHAR,
    pub nx_tcp_socket_reserved: UCHAR,
    pub nx_tcp_socket_ip_ptr: *mut NX_IP_STRUCT,
    pub nx_tcp_socket_type_of_service: ULONG,
    pub nx_tcp_socket_time_to_live: UINT,
    pub nx_tcp_socket_fragment_enable: ULONG,
    pub nx_tcp_socket_receive_queue_count: ULONG,
    pub nx_tcp_socket_receive_queue_head: *mut NX_PACKET,
    pub nx_tcp_socket_receive_queue_tail: *mut NX_PACKET,
    pub nx_tcp_socket_transmit_queue_maximum: ULONG,
    pub nx_tcp_socket_transmit_sent_count: ULONG,
    pub nx_tcp_socket_transmit_sent_head: *mut NX_PACKET,
    pub nx_tcp_socket_transmit_sent_tail: *mut NX_PACKET,
    pub nx_tcp_socket_timeout: ULONG,
    pub nx_tcp_socket_timeout_rate: ULONG,
    pub nx_tcp_socket_timeout_retries: ULONG,
    pub nx_tcp_socket_timeout_max_retries: ULONG,
    pub nx_tcp_socket_timeout_shift: UCHAR,
    pub nx_tcp_socket_reserved2: [UCHAR; 3usize],
    pub nx_tcp_socket_bound_next: *mut NX_TCP_SOCKET_STRUCT,
    pub nx_tcp_socket_bound_previous: *mut NX_TCP_SOCKET_STRUCT,
    pub nx_tcp_socket_bind_in_progress: *mut TX_THREAD,
    pub nx_tcp_socket_receive_suspension_list: *mut TX_THREAD,
    pub nx_tcp_socket_receive_suspended_count: ULONG,
    pub nx_tcp_socket_transmit_suspension_list: *mut TX_THREAD,
    pub nx_tcp_socket_transmit_suspended_count: ULONG,
    pub nx_tcp_socket_connect_suspended_thread: *mut TX_THREAD,
    pub nx_tcp_socket_disconnect_suspended_thread: *mut TX_THREAD,
    pub nx_tcp_socket_bind_suspension_list: *mut TX_THREAD,
    pub nx_tcp_socket_bind_suspended_count: ULONG,
    pub nx_tcp_socket_created_next: *mut NX_TCP_SOCKET_STRUCT,
    pub nx_tcp_socket_created_previous: *mut NX_TCP_SOCKET_STRUCT,
    pub nx_tcp_urgent_data_callback:
        ::core::option::Option<unsafe extern "C" fn(socket_ptr: *mut NX_TCP_SOCKET_STRUCT)>,
    pub nx_tcp_socket_syn_received_notify: ::core::option::Option<
        unsafe extern "C" fn(
            socket_ptr: *mut NX_TCP_SOCKET_STRUCT,
            packet_ptr: *mut NX_PACKET,
        ) -> UINT,
    >,
    pub nx_tcp_establish_notify:
        ::core::option::Option<unsafe extern "C" fn(socket_ptr: *mut NX_TCP_SOCKET_STRUCT)>,
    pub nx_tcp_disconnect_complete_notify:
        ::core::option::Option<unsafe extern "C" fn(socket_ptr: *mut NX_TCP_SOCKET_STRUCT)>,
    pub nx_tcp_timed_wait_callback:
        ::core::option::Option<unsafe extern "C" fn(socket_ptr: *mut NX_TCP_SOCKET_STRUCT)>,
    pub nx_tcp_disconnect_callback:
        ::core::option::Option<unsafe extern "C" fn(socket_ptr: *mut NX_TCP_SOCKET_STRUCT)>,
    pub nx_tcp_receive_callback:
        ::core::option::Option<unsafe extern "C" fn(socket_ptr: *mut NX_TCP_SOCKET_STRUCT)>,
    pub nx_tcp_socket_window_update_notify:
        ::core::option::Option<unsafe extern "C" fn(socket_ptr: *mut NX_TCP_SOCKET_STRUCT)>,
    pub nx_tcp_socket_reserved_ptr: *mut ::core::ffi::c_void,
    pub nx_tcp_socket_transmit_queue_maximum_default: ULONG,
}
pub type NX_TCP_SOCKET = NX_TCP_SOCKET_STRUCT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NX_TCP_LISTEN_STRUCT {
    pub nx_tcp_listen_port: UINT,
    pub nx_tcp_listen_callback:
        ::core::option::Option<unsafe extern "C" fn(socket_ptr: *mut NX_TCP_SOCKET, port: UINT)>,
    pub nx_tcp_listen_socket_ptr: *mut NX_TCP_SOCKET,
    pub nx_tcp_listen_queue_maximum: ULONG,
    pub nx_tcp_listen_queue_current: ULONG,
    pub nx_tcp_listen_queue_head: *mut NX_PACKET,
    pub nx_tcp_listen_queue_tail: *mut NX_PACKET,
    pub nx_tcp_listen_next: *mut NX_TCP_LISTEN_STRUCT,
    pub nx_tcp_listen_previous: *mut NX_TCP_LISTEN_STRUCT,
}
pub type NX_TCP_LISTEN = NX_TCP_LISTEN_STRUCT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NXD_IPV6_ADDRESS_STRUCT {
    pub nxd_ipv6_address_valid: UCHAR,
    pub nxd_ipv6_address_type: UCHAR,
    pub nxd_ipv6_address_state: UCHAR,
    pub nxd_ipv6_address_prefix_length: UCHAR,
    pub nxd_ipv6_address_attached: *mut NX_INTERFACE_STRUCT,
    pub nxd_ipv6_address: [ULONG; 4usize],
    pub nxd_ipv6_address_next: *mut NXD_IPV6_ADDRESS_STRUCT,
    pub nxd_ipv6_address_DupAddrDetectTransmit: UCHAR,
    pub nxd_ipv6_address_ConfigurationMethod: UCHAR,
    pub nxd_ipv6_address_index: UCHAR,
    pub reserved: UCHAR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NX_INTERFACE_STRUCT {
    pub nx_interface_name: *mut CHAR,
    pub nx_interface_valid: UCHAR,
    pub nx_interface_address_mapping_needed: UCHAR,
    pub nx_interface_link_up: UCHAR,
    pub nx_interface_index: UCHAR,
    pub nx_interface_link_status_change: UCHAR,
    pub nx_interface_reserved: [UCHAR; 3usize],
    pub nx_interface_physical_address_msw: ULONG,
    pub nx_interface_physical_address_lsw: ULONG,
    pub nx_interface_ip_address: ULONG,
    pub nx_interface_ip_network_mask: ULONG,
    pub nx_interface_ip_network: ULONG,
    pub nxd_interface_ipv6_address_list_head: *mut NXD_IPV6_ADDRESS_STRUCT,
    pub nx_interface_ip_mtu_size: ULONG,
    pub nx_ipv6_rtr_solicitation_max: ULONG,
    pub nx_ipv6_rtr_solicitation_count: ULONG,
    pub nx_ipv6_rtr_solicitation_interval: ULONG,
    pub nx_ipv6_rtr_solicitation_timer: ULONG,
    pub nx_interface_additional_link_info: *mut ::core::ffi::c_void,
    pub nx_interface_link_driver_entry:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut NX_IP_DRIVER_STRUCT)>,
    pub nx_interface_arp_defend_timeout: ULONG,
    pub nx_interface_ip_probe_address: ULONG,
    pub nx_interface_ip_conflict_notify_handler: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut NX_IP_STRUCT,
            arg2: UINT,
            arg3: ULONG,
            arg4: ULONG,
            arg5: ULONG,
        ),
    >,
}
pub type NX_INTERFACE = NX_INTERFACE_STRUCT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NX_IPV4_MULTICAST_STRUCT {
    pub nx_ipv4_multicast_join_list: ULONG,
    pub nx_ipv4_multicast_join_interface_list: *mut NX_INTERFACE,
    pub nx_ipv4_multicast_join_count: ULONG,
    pub nx_ipv4_multicast_update_time: ULONG,
    pub nx_ipv4_multicast_loopback_enable: UINT,
}
pub type NX_IPV4_MULTICAST_ENTRY = NX_IPV4_MULTICAST_STRUCT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NX_IP_STRUCT {
    pub nx_ip_id: ULONG,
    pub nx_ip_name: *mut CHAR,
    pub nx_ip_gateway_address: ULONG,
    pub nx_ip_gateway_interface: *mut NX_INTERFACE_STRUCT,
    pub nx_ip_total_packet_send_requests: ULONG,
    pub nx_ip_total_packets_sent: ULONG,
    pub nx_ip_total_bytes_sent: ULONG,
    pub nx_ip_total_packets_received: ULONG,
    pub nx_ip_total_packets_delivered: ULONG,
    pub nx_ip_total_bytes_received: ULONG,
    pub nx_ip_packets_forwarded: ULONG,
    pub nx_ip_packets_reassembled: ULONG,
    pub nx_ip_reassembly_failures: ULONG,
    pub nx_ip_invalid_packets: ULONG,
    pub nx_ip_invalid_transmit_packets: ULONG,
    pub nx_ip_invalid_receive_address: ULONG,
    pub nx_ip_unknown_protocols_received: ULONG,
    pub nx_ip_transmit_resource_errors: ULONG,
    pub nx_ip_transmit_no_route_errors: ULONG,
    pub nx_ip_receive_packets_dropped: ULONG,
    pub nx_ip_receive_checksum_errors: ULONG,
    pub nx_ip_send_packets_dropped: ULONG,
    pub nx_ip_total_fragment_requests: ULONG,
    pub nx_ip_successful_fragment_requests: ULONG,
    pub nx_ip_fragment_failures: ULONG,
    pub nx_ip_total_fragments_sent: ULONG,
    pub nx_ip_total_fragments_received: ULONG,
    pub nx_ip_arp_requests_sent: ULONG,
    pub nx_ip_arp_requests_received: ULONG,
    pub nx_ip_arp_responses_sent: ULONG,
    pub nx_ip_arp_responses_received: ULONG,
    pub nx_ip_arp_aged_entries: ULONG,
    pub nx_ip_arp_invalid_messages: ULONG,
    pub nx_ip_arp_static_entries: ULONG,
    pub nx_ip_udp_packets_sent: ULONG,
    pub nx_ip_udp_bytes_sent: ULONG,
    pub nx_ip_udp_packets_received: ULONG,
    pub nx_ip_udp_bytes_received: ULONG,
    pub nx_ip_udp_invalid_packets: ULONG,
    pub nx_ip_udp_no_port_for_delivery: ULONG,
    pub nx_ip_udp_receive_packets_dropped: ULONG,
    pub nx_ip_udp_checksum_errors: ULONG,
    pub nx_ip_tcp_packets_sent: ULONG,
    pub nx_ip_tcp_bytes_sent: ULONG,
    pub nx_ip_tcp_packets_received: ULONG,
    pub nx_ip_tcp_bytes_received: ULONG,
    pub nx_ip_tcp_invalid_packets: ULONG,
    pub nx_ip_tcp_receive_packets_dropped: ULONG,
    pub nx_ip_tcp_checksum_errors: ULONG,
    pub nx_ip_tcp_connections: ULONG,
    pub nx_ip_tcp_passive_connections: ULONG,
    pub nx_ip_tcp_active_connections: ULONG,
    pub nx_ip_tcp_disconnections: ULONG,
    pub nx_ip_tcp_connections_dropped: ULONG,
    pub nx_ip_tcp_retransmit_packets: ULONG,
    pub nx_ip_tcp_resets_received: ULONG,
    pub nx_ip_tcp_resets_sent: ULONG,
    pub nx_ip_icmp_total_messages_received: ULONG,
    pub nx_ip_icmp_checksum_errors: ULONG,
    pub nx_ip_icmp_invalid_packets: ULONG,
    pub nx_ip_icmp_unhandled_messages: ULONG,
    pub nx_ip_pings_sent: ULONG,
    pub nx_ip_ping_timeouts: ULONG,
    pub nx_ip_ping_threads_suspended: ULONG,
    pub nx_ip_ping_responses_received: ULONG,
    pub nx_ip_pings_received: ULONG,
    pub nx_ip_pings_responded_to: ULONG,
    pub nx_ip_igmp_invalid_packets: ULONG,
    pub nx_ip_igmp_reports_sent: ULONG,
    pub nx_ip_igmp_queries_received: ULONG,
    pub nx_ip_igmp_checksum_errors: ULONG,
    pub nx_ip_igmp_groups_joined: ULONG,
    pub nx_ip_igmp_router_version: ULONG,
    pub nx_ip_rarp_requests_sent: ULONG,
    pub nx_ip_rarp_responses_received: ULONG,
    pub nx_ip_rarp_invalid_messages: ULONG,
    pub nx_ip_forward_packet_process:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut NX_IP_STRUCT, arg2: *mut NX_PACKET)>,
    pub nx_ip_packet_id: ULONG,
    pub nx_ip_default_packet_pool: *mut NX_PACKET_POOL_STRUCT,
    pub nx_ip_protection: TX_MUTEX,
    pub nx_ip_initialize_done: UINT,
    pub nx_ip_deferred_received_packet_head: *mut NX_PACKET,
    pub nx_ip_deferred_received_packet_tail: *mut NX_PACKET,
    pub nx_ip_raw_ip_processing: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut NX_IP_STRUCT, arg2: ULONG, arg3: *mut NX_PACKET) -> UINT,
    >,
    pub nx_ip_raw_received_packet_head: *mut NX_PACKET,
    pub nx_ip_raw_received_packet_tail: *mut NX_PACKET,
    pub nx_ip_raw_received_packet_count: ULONG,
    pub nx_ip_raw_received_packet_max: ULONG,
    pub nx_ip_raw_packet_suspension_list: *mut TX_THREAD,
    pub nx_ip_raw_packet_suspended_count: ULONG,
    pub nx_ip_thread: TX_THREAD,
    pub nx_ip_events: TX_EVENT_FLAGS_GROUP,
    pub nx_ip_periodic_timer: TX_TIMER,
    pub nx_ip_fragment_processing:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut NX_IP_DRIVER_STRUCT)>,
    pub nx_ip_fragment_assembly:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut NX_IP_STRUCT)>,
    pub nx_ip_fragment_timeout_check:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut NX_IP_STRUCT)>,
    pub nx_ip_timeout_fragment: *mut NX_PACKET,
    pub nx_ip_received_fragment_head: *mut NX_PACKET,
    pub nx_ip_received_fragment_tail: *mut NX_PACKET,
    pub nx_ip_fragment_assembly_head: *mut NX_PACKET,
    pub nx_ip_fragment_assembly_tail: *mut NX_PACKET,
    pub nx_ip_address_change_notify: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut NX_IP_STRUCT, arg2: *mut ::core::ffi::c_void),
    >,
    pub nx_ip_address_change_notify_additional_info: *mut ::core::ffi::c_void,
    pub nx_ip_address_change_notify_internal: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut NX_IP_STRUCT, arg2: *mut ::core::ffi::c_void),
    >,
    pub nx_ipv4_multicast_entry: [NX_IPV4_MULTICAST_ENTRY; 7usize],
    pub nx_ip_igmp_global_loopback_enable: UINT,
    pub nx_ip_igmp_packet_receive: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut NX_IP_STRUCT, arg2: *mut NX_PACKET_STRUCT),
    >,
    pub nx_ip_igmp_periodic_processing:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut NX_IP_STRUCT)>,
    pub nx_ip_igmp_queue_process:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut NX_IP_STRUCT)>,
    pub nx_ip_igmp_queue_head: *mut NX_PACKET,
    pub nx_ip_icmp_sequence: ULONG,
    pub nx_ip_icmp_packet_receive: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut NX_IP_STRUCT, arg2: *mut NX_PACKET_STRUCT),
    >,
    pub nx_ip_icmp_queue_process:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut NX_IP_STRUCT)>,
    pub nx_ip_icmpv4_packet_process:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut NX_IP_STRUCT, arg2: *mut NX_PACKET)>,
    pub nx_ip_icmp_queue_head: *mut NX_PACKET,
    pub nx_ip_icmp_ping_suspension_list: *mut TX_THREAD,
    pub nx_ip_icmp_ping_suspended_count: ULONG,
    pub nx_ip_udp_port_table: [*mut NX_UDP_SOCKET_STRUCT; 32usize],
    pub nx_ip_udp_created_sockets_ptr: *mut NX_UDP_SOCKET_STRUCT,
    pub nx_ip_udp_created_sockets_count: ULONG,
    pub nx_ip_udp_packet_receive: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut NX_IP_STRUCT, arg2: *mut NX_PACKET_STRUCT),
    >,
    pub nx_ip_tcp_port_table: [*mut NX_TCP_SOCKET_STRUCT; 32usize],
    pub nx_ip_tcp_created_sockets_ptr: *mut NX_TCP_SOCKET_STRUCT,
    pub nx_ip_tcp_created_sockets_count: ULONG,
    pub nx_ip_tcp_packet_receive: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut NX_IP_STRUCT, arg2: *mut NX_PACKET_STRUCT),
    >,
    pub nx_ip_tcp_periodic_processing:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut NX_IP_STRUCT)>,
    pub nx_ip_tcp_fast_periodic_processing:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut NX_IP_STRUCT)>,
    pub nx_ip_tcp_queue_process:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut NX_IP_STRUCT)>,
    pub nx_ip_tcp_queue_head: *mut NX_PACKET,
    pub nx_ip_tcp_queue_tail: *mut NX_PACKET,
    pub nx_ip_tcp_received_packet_count: ULONG,
    pub nx_ip_tcp_server_listen_reqs: [NX_TCP_LISTEN; 10usize],
    pub nx_ip_tcp_available_listen_requests: *mut NX_TCP_LISTEN,
    pub nx_ip_tcp_active_listen_requests: *mut NX_TCP_LISTEN,
    pub nx_ip_fast_periodic_timer_created: UINT,
    pub nx_ip_fast_periodic_timer: TX_TIMER,
    pub nx_ip_arp_table: [*mut NX_ARP_STRUCT; 32usize],
    pub nx_ip_arp_static_list: *mut NX_ARP_STRUCT,
    pub nx_ip_arp_dynamic_list: *mut NX_ARP_STRUCT,
    pub nx_ip_arp_dynamic_active_count: ULONG,
    pub nx_ip_arp_deferred_received_packet_head: *mut NX_PACKET,
    pub nx_ip_arp_deferred_received_packet_tail: *mut NX_PACKET,
    pub nx_ip_arp_allocate: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut NX_IP_STRUCT,
            arg2: *mut *mut NX_ARP_STRUCT,
            arg3: UINT,
        ) -> UINT,
    >,
    pub nx_ip_arp_periodic_update:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut NX_IP_STRUCT)>,
    pub nx_ip_arp_queue_process:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut NX_IP_STRUCT)>,
    pub nx_ip_arp_packet_send: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut NX_IP_STRUCT,
            destination_ip: ULONG,
            nx_interface: *mut NX_INTERFACE,
        ),
    >,
    pub nx_ip_arp_gratuitous_response_handler:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut NX_IP_STRUCT, arg2: *mut NX_PACKET)>,
    pub nx_ip_arp_cache_memory: *mut NX_ARP_STRUCT,
    pub nx_ip_arp_total_entries: ULONG,
    pub nx_ip_rarp_periodic_update:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut NX_IP_STRUCT)>,
    pub nx_ip_rarp_queue_process:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut NX_IP_STRUCT)>,
    pub nx_ip_rarp_deferred_received_packet_head: *mut NX_PACKET,
    pub nx_ip_rarp_deferred_received_packet_tail: *mut NX_PACKET,
    pub nx_ip_created_next: *mut NX_IP_STRUCT,
    pub nx_ip_created_previous: *mut NX_IP_STRUCT,
    pub nx_ip_reserved_ptr: *mut ::core::ffi::c_void,
    pub nx_tcp_deferred_cleanup_check:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut NX_IP_STRUCT)>,
    pub nx_ip_interface: [NX_INTERFACE; 2usize],
    pub nx_ipv4_packet_receive:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut NX_IP_STRUCT, arg2: *mut NX_PACKET)>,
    pub nx_ip_link_status_change_callback: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut NX_IP_STRUCT, arg2: UINT, arg3: UINT),
    >,
    pub nx_ip_packet_filter: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void, arg2: UINT) -> UINT,
    >,
    pub nx_ip_packet_filter_extended: ::core::option::Option<
        unsafe extern "C" fn(
            ip_ptr: *mut NX_IP_STRUCT,
            packet_ptr: *mut NX_PACKET,
            direction: UINT,
        ) -> UINT,
    >,
}
pub type NX_IP = NX_IP_STRUCT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NX_IP_DRIVER_STRUCT {
    pub nx_ip_driver_command: UINT,
    pub nx_ip_driver_status: UINT,
    pub nx_ip_driver_physical_address_msw: ULONG,
    pub nx_ip_driver_physical_address_lsw: ULONG,
    pub nx_ip_driver_packet: *mut NX_PACKET,
    pub nx_ip_driver_return_ptr: *mut ULONG,
    pub nx_ip_driver_ptr: *mut NX_IP_STRUCT,
    pub nx_ip_driver_interface: *mut NX_INTERFACE,
}
pub type NX_IP_DRIVER = NX_IP_DRIVER_STRUCT;
extern "C" {
    pub fn _nx_arp_dynamic_entries_invalidate(ip_ptr: *mut NX_IP) -> UINT;
}
extern "C" {
    pub fn _nx_arp_dynamic_entry_set(
        ip_ptr: *mut NX_IP,
        ip_address: ULONG,
        physical_msw: ULONG,
        physical_lsw: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_arp_enable(
        ip_ptr: *mut NX_IP,
        arp_cache_memory: *mut ::core::ffi::c_void,
        arp_cache_size: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_arp_entry_delete(ip_ptr: *mut NX_IP, ip_address: ULONG) -> UINT;
}
extern "C" {
    pub fn _nx_arp_gratuitous_send(
        ip_ptr: *mut NX_IP,
        response_handler: ::core::option::Option<
            unsafe extern "C" fn(ip_ptr: *mut NX_IP, packet_ptr: *mut NX_PACKET),
        >,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_arp_hardware_address_find(
        ip_ptr: *mut NX_IP,
        ip_address: ULONG,
        physical_msw: *mut ULONG,
        physical_lsw: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_arp_info_get(
        ip_ptr: *mut NX_IP,
        arp_requests_sent: *mut ULONG,
        arp_requests_received: *mut ULONG,
        arp_responses_sent: *mut ULONG,
        arp_responses_received: *mut ULONG,
        arp_dynamic_entries: *mut ULONG,
        arp_static_entries: *mut ULONG,
        arp_aged_entries: *mut ULONG,
        arp_invalid_messages: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_arp_ip_address_find(
        ip_ptr: *mut NX_IP,
        ip_address: *mut ULONG,
        physical_msw: ULONG,
        physical_lsw: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_arp_static_entries_delete(ip_ptr: *mut NX_IP) -> UINT;
}
extern "C" {
    pub fn _nx_arp_static_entry_create(
        ip_ptr: *mut NX_IP,
        ip_address: ULONG,
        physical_msw: ULONG,
        physical_lsw: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_arp_static_entry_delete(
        ip_ptr: *mut NX_IP,
        ip_address: ULONG,
        physical_msw: ULONG,
        physical_lsw: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_icmp_enable(ip_ptr: *mut NX_IP) -> UINT;
}
extern "C" {
    pub fn _nx_icmp_info_get(
        ip_ptr: *mut NX_IP,
        pings_sent: *mut ULONG,
        ping_timeouts: *mut ULONG,
        ping_threads_suspended: *mut ULONG,
        ping_responses_received: *mut ULONG,
        icmp_checksum_errors: *mut ULONG,
        icmp_unhandled_messages: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_icmp_ping(
        ip_ptr: *mut NX_IP,
        ip_address: ULONG,
        data: *mut CHAR,
        data_size: ULONG,
        response_ptr: *mut *mut NX_PACKET,
        wait_option: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nxd_icmp_enable(ip_ptr: *mut NX_IP) -> UINT;
}
extern "C" {
    pub fn _nxd_icmp_ping(
        ip_ptr: *mut NX_IP,
        ip_address: *mut NXD_ADDRESS,
        data_ptr: *mut CHAR,
        data_size: ULONG,
        response_ptr: *mut *mut NX_PACKET,
        wait_option: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nxd_icmp_source_ping(
        ip_ptr: *mut NX_IP,
        ip_address: *mut NXD_ADDRESS,
        address_index: UINT,
        data_ptr: *mut CHAR,
        data_size: ULONG,
        response_ptr: *mut *mut NX_PACKET,
        wait_option: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nxd_icmpv6_ra_flag_callback_set(
        ip_ptr: *mut NX_IP,
        icmpv6_ra_flag_callback: ::core::option::Option<
            unsafe extern "C" fn(ip_ptr: *mut NX_IP, ra_flag: UINT),
        >,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_igmp_enable(ip_ptr: *mut NX_IP) -> UINT;
}
extern "C" {
    pub fn _nx_igmp_info_get(
        ip_ptr: *mut NX_IP,
        igmp_reports_sent: *mut ULONG,
        igmp_queries_received: *mut ULONG,
        igmp_checksum_errors: *mut ULONG,
        current_groups_joined: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_igmp_loopback_disable(ip_ptr: *mut NX_IP) -> UINT;
}
extern "C" {
    pub fn _nx_igmp_loopback_enable(ip_ptr: *mut NX_IP) -> UINT;
}
extern "C" {
    pub fn _nx_igmp_multicast_interface_join(
        ip_ptr: *mut NX_IP,
        group_address: ULONG,
        interface_index: UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_igmp_multicast_interface_leave(
        ip_ptr: *mut NX_IP,
        group_address: ULONG,
        interface_index: UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_igmp_multicast_join(ip_ptr: *mut NX_IP, group_address: ULONG) -> UINT;
}
extern "C" {
    pub fn _nx_igmp_multicast_leave(ip_ptr: *mut NX_IP, group_address: ULONG) -> UINT;
}
extern "C" {
    pub fn _nx_ip_address_change_notify(
        ip_ptr: *mut NX_IP,
        ip_address_change_notify: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut NX_IP, arg2: *mut ::core::ffi::c_void),
        >,
        additional_info: *mut ::core::ffi::c_void,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_ip_address_get(
        ip_ptr: *mut NX_IP,
        ip_address: *mut ULONG,
        network_mask: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_ip_address_set(ip_ptr: *mut NX_IP, ip_address: ULONG, network_mask: ULONG) -> UINT;
}
extern "C" {
    pub fn _nx_ip_auxiliary_packet_pool_set(
        ip_ptr: *mut NX_IP,
        auxiliary_pool: *mut NX_PACKET_POOL,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_ip_create(
        ip_ptr: *mut NX_IP,
        name: *mut CHAR,
        ip_address: ULONG,
        network_mask: ULONG,
        default_pool: *mut NX_PACKET_POOL,
        ip_link_driver: ::core::option::Option<unsafe extern "C" fn(arg1: *mut NX_IP_DRIVER)>,
        memory_ptr: *mut ::core::ffi::c_void,
        memory_size: ULONG,
        priority: UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_ip_delete(ip_ptr: *mut NX_IP) -> UINT;
}
extern "C" {
    pub fn _nx_ip_driver_direct_command(
        ip_ptr: *mut NX_IP,
        command: UINT,
        return_value_ptr: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_ip_driver_interface_direct_command(
        ip_ptr: *mut NX_IP,
        command: UINT,
        interface_index: UINT,
        return_value_ptr: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_ip_forwarding_disable(ip_ptr: *mut NX_IP) -> UINT;
}
extern "C" {
    pub fn _nx_ip_forwarding_enable(ip_ptr: *mut NX_IP) -> UINT;
}
extern "C" {
    pub fn _nx_ip_fragment_disable(ip_ptr: *mut NX_IP) -> UINT;
}
extern "C" {
    pub fn _nx_ip_fragment_enable(ip_ptr: *mut NX_IP) -> UINT;
}
extern "C" {
    pub fn _nx_ip_gateway_address_clear(ip_ptr: *mut NX_IP) -> UINT;
}
extern "C" {
    pub fn _nx_ip_gateway_address_get(ip_ptr: *mut NX_IP, ip_address: *mut ULONG) -> UINT;
}
extern "C" {
    pub fn _nx_ip_gateway_address_set(ip_ptr: *mut NX_IP, ip_address: ULONG) -> UINT;
}
extern "C" {
    pub fn _nx_ip_info_get(
        ip_ptr: *mut NX_IP,
        ip_total_packets_sent: *mut ULONG,
        ip_total_bytes_sent: *mut ULONG,
        ip_total_packets_received: *mut ULONG,
        ip_total_bytes_received: *mut ULONG,
        ip_invalid_packets: *mut ULONG,
        ip_receive_packets_dropped: *mut ULONG,
        ip_receive_checksum_errors: *mut ULONG,
        ip_send_packets_dropped: *mut ULONG,
        ip_total_fragments_sent: *mut ULONG,
        ip_total_fragments_received: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_ip_interface_address_get(
        ip_ptr: *mut NX_IP,
        interface_index: UINT,
        ip_address: *mut ULONG,
        network_mask: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_ip_interface_address_mapping_configure(
        ip_ptr: *mut NX_IP,
        interface_index: UINT,
        mapping_needed: UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_ip_interface_address_set(
        ip_ptr: *mut NX_IP,
        interface_index: UINT,
        ip_address: ULONG,
        network_mask: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_ip_interface_attach(
        ip_ptr: *mut NX_IP,
        interface_name: *mut CHAR,
        ip_address: ULONG,
        network_mask: ULONG,
        ip_link_driver: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut NX_IP_DRIVER_STRUCT),
        >,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_ip_interface_capability_get(
        ip_ptr: *mut NX_IP,
        interface_index: UINT,
        interface_capability_flag: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_ip_interface_capability_set(
        ip_ptr: *mut NX_IP,
        interface_index: UINT,
        interface_capability_flag: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_ip_interface_detach(ip_ptr: *mut NX_IP, index: UINT) -> UINT;
}
extern "C" {
    pub fn _nx_ip_interface_info_get(
        ip_ptr: *mut NX_IP,
        interface_index: UINT,
        interface_name: *mut *mut CHAR,
        ip_address: *mut ULONG,
        network_mask: *mut ULONG,
        mtu_size: *mut ULONG,
        physical_address_msw: *mut ULONG,
        physical_address_lsw: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_ip_interface_mtu_set(
        ip_ptr: *mut NX_IP,
        interface_index: UINT,
        mtu_size: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_ip_interface_physical_address_get(
        ip_ptr: *mut NX_IP,
        interface_index: UINT,
        physical_msw: *mut ULONG,
        physical_lsw: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_ip_interface_physical_address_set(
        ip_ptr: *mut NX_IP,
        interface_index: UINT,
        physical_msw: ULONG,
        physical_lsw: ULONG,
        update_driver: UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_ip_interface_status_check(
        ip_ptr: *mut NX_IP,
        interface_index: UINT,
        needed_status: ULONG,
        actual_status: *mut ULONG,
        wait_option: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_ip_link_status_change_notify_set(
        ip_ptr: *mut NX_IP,
        link_status_change_notify: ::core::option::Option<
            unsafe extern "C" fn(ip_ptr: *mut NX_IP, interface_index: UINT, link_up: UINT),
        >,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_ip_max_payload_size_find(
        ip_ptr: *mut NX_IP,
        dest_address: *mut NXD_ADDRESS,
        if_index: UINT,
        src_port: UINT,
        dest_port: UINT,
        protocol: ULONG,
        start_offset_ptr: *mut ULONG,
        payload_length_ptr: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_ip_status_check(
        ip_ptr: *mut NX_IP,
        needed_status: ULONG,
        actual_status: *mut ULONG,
        wait_option: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_ip_static_route_add(
        ip_ptr: *mut NX_IP,
        network_address: ULONG,
        net_mask: ULONG,
        next_hop: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_ip_static_route_delete(
        ip_ptr: *mut NX_IP,
        network_address: ULONG,
        net_mask: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_ipv4_multicast_interface_join(
        ip_ptr: *mut NX_IP,
        group_address: ULONG,
        interface_index: UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_ipv4_multicast_interface_leave(
        ip_ptr: *mut NX_IP,
        group_address: ULONG,
        interface_index: UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nxd_ipv6_address_change_notify(
        ip_ptr: *mut NX_IP,
        ip_address_change_notify: ::core::option::Option<
            unsafe extern "C" fn(
                ip_ptr: *mut NX_IP,
                status: UINT,
                interface_index: UINT,
                address_index: UINT,
                ip_address: *mut ULONG,
            ),
        >,
    ) -> UINT;
}
extern "C" {
    pub fn _nxd_ipv6_address_delete(ip_ptr: *mut NX_IP, address_index: UINT) -> UINT;
}
extern "C" {
    pub fn _nxd_ipv6_address_get(
        ip_ptr: *mut NX_IP,
        address_index: UINT,
        ip_address: *mut NXD_ADDRESS,
        prefix_length: *mut ULONG,
        interface_index: *mut UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nxd_ipv6_address_set(
        ip_ptr: *mut NX_IP,
        interface_index: UINT,
        ip_address: *mut NXD_ADDRESS,
        prefix_length: ULONG,
        address_index: *mut UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nxd_ipv6_default_router_add(
        ip_ptr: *mut NX_IP,
        router_addr: *mut NXD_ADDRESS,
        router_lifetime: ULONG,
        interface_index: UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nxd_ipv6_default_router_delete(
        ip_ptr: *mut NX_IP,
        router_addr: *mut NXD_ADDRESS,
    ) -> UINT;
}
extern "C" {
    pub fn _nxd_ipv6_default_router_entry_get(
        ip_ptr: *mut NX_IP,
        interface_index: UINT,
        entry_index: UINT,
        router_addr: *mut NXD_ADDRESS,
        router_lifetime: *mut ULONG,
        prefix_length: *mut ULONG,
        configuration_method: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nxd_ipv6_default_router_get(
        ip_ptr: *mut NX_IP,
        interface_index: UINT,
        router_addr: *mut NXD_ADDRESS,
        router_lifetime: *mut ULONG,
        prefix_length: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nxd_ipv6_default_router_number_of_entries_get(
        ip_ptr: *mut NX_IP,
        interface_index: UINT,
        num_entries: *mut UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nxd_ipv6_disable(ip_ptr: *mut NX_IP) -> UINT;
}
extern "C" {
    pub fn _nxd_ipv6_enable(ip_ptr: *mut NX_IP) -> UINT;
}
extern "C" {
    pub fn _nxd_ipv6_multicast_interface_join(
        ip_ptr: *mut NX_IP,
        group_address: *mut NXD_ADDRESS,
        interface_index: UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nxd_ipv6_multicast_interface_leave(
        ip_ptr: *mut NX_IP,
        group_address: *mut NXD_ADDRESS,
        interface_index: UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nxd_ipv6_stateless_address_autoconfig_disable(
        ip_ptr: *mut NX_IP,
        interface_index: UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nxd_ipv6_stateless_address_autoconfig_enable(
        ip_ptr: *mut NX_IP,
        interface_index: UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_ip_raw_packet_disable(ip_ptr: *mut NX_IP) -> UINT;
}
extern "C" {
    pub fn _nx_ip_raw_packet_enable(ip_ptr: *mut NX_IP) -> UINT;
}
extern "C" {
    pub fn _nx_ip_raw_packet_filter_set(
        ip_ptr: *mut NX_IP,
        raw_packet_filter: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut NX_IP, arg2: ULONG, arg3: *mut NX_PACKET) -> UINT,
        >,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_ip_raw_packet_receive(
        ip_ptr: *mut NX_IP,
        packet_ptr: *mut *mut NX_PACKET,
        wait_option: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_ip_raw_packet_send(
        ip_ptr: *mut NX_IP,
        packet_ptr: *mut NX_PACKET,
        destination_ip: ULONG,
        type_of_service: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_ip_raw_packet_source_send(
        ip_ptr: *mut NX_IP,
        packet_ptr: *mut NX_PACKET,
        destination_ip: ULONG,
        address_index: UINT,
        type_of_service: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_ip_raw_receive_queue_max_set(ip_ptr: *mut NX_IP, queue_max: ULONG) -> UINT;
}
extern "C" {
    pub fn _nxd_ip_raw_packet_send(
        ip_ptr: *mut NX_IP,
        packet_ptr: *mut NX_PACKET,
        destination_ip: *mut NXD_ADDRESS,
        protocol: ULONG,
        ttl: UINT,
        tos: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nxd_ip_raw_packet_source_send(
        ip_ptr: *mut NX_IP,
        packet_ptr: *mut NX_PACKET,
        destination_ip: *mut NXD_ADDRESS,
        address_index: UINT,
        protocol: ULONG,
        ttl: UINT,
        tos: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nxd_nd_cache_entry_set(
        ip_ptr: *mut NX_IP,
        dest_ip: *mut ULONG,
        interface_index: UINT,
        mac: *mut CHAR,
    ) -> UINT;
}
extern "C" {
    pub fn _nxd_nd_cache_entry_delete(ip_ptr: *mut NX_IP, dest_ip: *mut ULONG) -> UINT;
}
extern "C" {
    pub fn _nxd_nd_cache_hardware_address_find(
        ip_ptr: *mut NX_IP,
        ip_address: *mut NXD_ADDRESS,
        physical_msw: *mut ULONG,
        physical_lsw: *mut ULONG,
        interface_index: *mut UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nxd_nd_cache_invalidate(ip_ptr: *mut NX_IP) -> UINT;
}
extern "C" {
    pub fn _nxd_nd_cache_ip_address_find(
        ip_ptr: *mut NX_IP,
        ip_address: *mut NXD_ADDRESS,
        physical_msw: ULONG,
        physical_lsw: ULONG,
        interface_index: *mut UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_packet_allocate(
        pool_ptr: *mut NX_PACKET_POOL,
        packet_ptr: *mut *mut NX_PACKET,
        packet_type: ULONG,
        wait_option: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_packet_copy(
        packet_ptr: *mut NX_PACKET,
        new_packet_ptr: *mut *mut NX_PACKET,
        pool_ptr: *mut NX_PACKET_POOL,
        wait_option: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_packet_data_append(
        packet_ptr: *mut NX_PACKET,
        data_start: *mut ::core::ffi::c_void,
        data_size: ULONG,
        pool_ptr: *mut NX_PACKET_POOL,
        wait_option: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_packet_data_extract_offset(
        packet_ptr: *mut NX_PACKET,
        offset: ULONG,
        buffer_start: *mut ::core::ffi::c_void,
        buffer_length: ULONG,
        bytes_copied: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_packet_data_retrieve(
        packet_ptr: *mut NX_PACKET,
        buffer_start: *mut ::core::ffi::c_void,
        bytes_copied: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_packet_length_get(packet_ptr: *mut NX_PACKET, length: *mut ULONG) -> UINT;
}
extern "C" {
    pub fn _nx_packet_pool_create(
        pool_ptr: *mut NX_PACKET_POOL,
        name: *mut CHAR,
        payload_size: ULONG,
        memory_ptr: *mut ::core::ffi::c_void,
        memory_size: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_packet_pool_delete(pool_ptr: *mut NX_PACKET_POOL) -> UINT;
}
extern "C" {
    pub fn _nx_packet_pool_info_get(
        pool_ptr: *mut NX_PACKET_POOL,
        total_packets: *mut ULONG,
        free_packets: *mut ULONG,
        empty_pool_requests: *mut ULONG,
        empty_pool_suspensions: *mut ULONG,
        invalid_packet_releases: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_packet_pool_low_watermark_set(
        pool_ptr: *mut NX_PACKET_POOL,
        low_water_mark: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_packet_release(packet_ptr: *mut NX_PACKET) -> UINT;
}
extern "C" {
    pub fn _nx_packet_transmit_release(packet_ptr: *mut NX_PACKET) -> UINT;
}
extern "C" {
    pub fn _nx_packet_vlan_priority_set(packet_ptr: *mut NX_PACKET, vlan_priority: UINT) -> UINT;
}
extern "C" {
    pub fn _nx_rarp_disable(ip_ptr: *mut NX_IP) -> UINT;
}
extern "C" {
    pub fn _nx_rarp_enable(ip_ptr: *mut NX_IP) -> UINT;
}
extern "C" {
    pub fn _nx_rarp_info_get(
        ip_ptr: *mut NX_IP,
        rarp_requests_sent: *mut ULONG,
        rarp_responses_received: *mut ULONG,
        rarp_invalid_messages: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_tcp_client_socket_bind(
        socket_ptr: *mut NX_TCP_SOCKET,
        port: UINT,
        wait_option: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_tcp_client_socket_connect(
        socket_ptr: *mut NX_TCP_SOCKET,
        server_ip: ULONG,
        server_port: UINT,
        wait_option: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_tcp_client_socket_port_get(
        socket_ptr: *mut NX_TCP_SOCKET,
        port_ptr: *mut UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_tcp_client_socket_unbind(socket_ptr: *mut NX_TCP_SOCKET) -> UINT;
}
extern "C" {
    pub fn _nx_tcp_enable(ip_ptr: *mut NX_IP) -> UINT;
}
extern "C" {
    pub fn _nx_tcp_free_port_find(ip_ptr: *mut NX_IP, port: UINT, free_port_ptr: *mut UINT)
        -> UINT;
}
extern "C" {
    pub fn _nx_tcp_info_get(
        ip_ptr: *mut NX_IP,
        tcp_packets_sent: *mut ULONG,
        tcp_bytes_sent: *mut ULONG,
        tcp_packets_received: *mut ULONG,
        tcp_bytes_received: *mut ULONG,
        tcp_invalid_packets: *mut ULONG,
        tcp_receive_packets_dropped: *mut ULONG,
        tcp_checksum_errors: *mut ULONG,
        tcp_connections: *mut ULONG,
        tcp_disconnections: *mut ULONG,
        tcp_connections_dropped: *mut ULONG,
        tcp_retransmit_packets: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_tcp_server_socket_accept(socket_ptr: *mut NX_TCP_SOCKET, wait_option: ULONG)
        -> UINT;
}
extern "C" {
    pub fn _nx_tcp_server_socket_listen(
        ip_ptr: *mut NX_IP,
        port: UINT,
        socket_ptr: *mut NX_TCP_SOCKET,
        listen_queue_size: UINT,
        tcp_listen_callback: ::core::option::Option<
            unsafe extern "C" fn(socket_ptr: *mut NX_TCP_SOCKET, port: UINT),
        >,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_tcp_server_socket_relisten(
        ip_ptr: *mut NX_IP,
        port: UINT,
        socket_ptr: *mut NX_TCP_SOCKET,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_tcp_server_socket_unaccept(socket_ptr: *mut NX_TCP_SOCKET) -> UINT;
}
extern "C" {
    pub fn _nx_tcp_server_socket_unlisten(ip_ptr: *mut NX_IP, port: UINT) -> UINT;
}
extern "C" {
    pub fn _nx_tcp_socket_bytes_available(
        socket_ptr: *mut NX_TCP_SOCKET,
        bytes_available: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_tcp_socket_create(
        ip_ptr: *mut NX_IP,
        socket_ptr: *mut NX_TCP_SOCKET,
        name: *mut CHAR,
        type_of_service: ULONG,
        fragment: ULONG,
        time_to_live: UINT,
        window_size: ULONG,
        tcp_urgent_data_callback: ::core::option::Option<
            unsafe extern "C" fn(socket_ptr: *mut NX_TCP_SOCKET),
        >,
        tcp_disconnect_callback: ::core::option::Option<
            unsafe extern "C" fn(socket_ptr: *mut NX_TCP_SOCKET),
        >,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_tcp_socket_delete(socket_ptr: *mut NX_TCP_SOCKET) -> UINT;
}
extern "C" {
    pub fn _nx_tcp_socket_disconnect(socket_ptr: *mut NX_TCP_SOCKET, wait_option: ULONG) -> UINT;
}
extern "C" {
    pub fn _nx_tcp_socket_disconnect_complete_notify(
        socket_ptr: *mut NX_TCP_SOCKET,
        tcp_disconnect_complete_notify: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut NX_TCP_SOCKET),
        >,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_tcp_socket_establish_notify(
        socket_ptr: *mut NX_TCP_SOCKET,
        tcp_establish_notify: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut NX_TCP_SOCKET),
        >,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_tcp_socket_info_get(
        socket_ptr: *mut NX_TCP_SOCKET,
        tcp_packets_sent: *mut ULONG,
        tcp_bytes_sent: *mut ULONG,
        tcp_packets_received: *mut ULONG,
        tcp_bytes_received: *mut ULONG,
        tcp_retransmit_packets: *mut ULONG,
        tcp_packets_queued: *mut ULONG,
        tcp_checksum_errors: *mut ULONG,
        tcp_socket_state: *mut ULONG,
        tcp_transmit_queue_depth: *mut ULONG,
        tcp_transmit_window: *mut ULONG,
        tcp_receive_window: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_tcp_socket_mss_get(socket_ptr: *mut NX_TCP_SOCKET, mss: *mut ULONG) -> UINT;
}
extern "C" {
    pub fn _nx_tcp_socket_mss_peer_get(
        socket_ptr: *mut NX_TCP_SOCKET,
        peer_mss: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_tcp_socket_mss_set(socket_ptr: *mut NX_TCP_SOCKET, mss: ULONG) -> UINT;
}
extern "C" {
    pub fn _nx_tcp_socket_peer_info_get(
        socket_ptr: *mut NX_TCP_SOCKET,
        peer_ip_address: *mut ULONG,
        peer_port: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_tcp_socket_queue_depth_notify_set(
        socket_ptr: *mut NX_TCP_SOCKET,
        tcp_socket_queue_depth_notify: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut NX_TCP_SOCKET),
        >,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_tcp_socket_receive(
        socket_ptr: *mut NX_TCP_SOCKET,
        packet_ptr: *mut *mut NX_PACKET,
        wait_option: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_tcp_socket_receive_notify(
        socket_ptr: *mut NX_TCP_SOCKET,
        tcp_receive_notify: ::core::option::Option<unsafe extern "C" fn(arg1: *mut NX_TCP_SOCKET)>,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_tcp_socket_receive_queue_max_set(
        socket_ptr: *mut NX_TCP_SOCKET,
        receive_queue_maximum: UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_tcp_socket_send(
        socket_ptr: *mut NX_TCP_SOCKET,
        packet_ptr: *mut NX_PACKET,
        wait_option: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_tcp_socket_state_wait(
        socket_ptr: *mut NX_TCP_SOCKET,
        desired_state: UINT,
        wait_option: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_tcp_socket_timed_wait_callback(
        socket_ptr: *mut NX_TCP_SOCKET,
        tcp_timed_wait_callback: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut NX_TCP_SOCKET),
        >,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_tcp_socket_transmit_configure(
        socket_ptr: *mut NX_TCP_SOCKET,
        max_queue_depth: ULONG,
        timeout: ULONG,
        max_retries: ULONG,
        timeout_shift: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_tcp_socket_window_update_notify_set(
        socket_ptr: *mut NX_TCP_SOCKET,
        tcp_window_update_notify: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut NX_TCP_SOCKET),
        >,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_tcp_socket_vlan_priority_set(
        socket_ptr: *mut NX_TCP_SOCKET,
        vlan_priority: UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nxd_tcp_client_socket_connect(
        socket_ptr: *mut NX_TCP_SOCKET,
        server_ip: *mut NXD_ADDRESS,
        server_port: UINT,
        wait_option: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nxd_tcp_socket_peer_info_get(
        socket_ptr: *mut NX_TCP_SOCKET,
        peer_ip_address: *mut NXD_ADDRESS,
        peer_port: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_udp_enable(ip_ptr: *mut NX_IP) -> UINT;
}
extern "C" {
    pub fn _nx_udp_free_port_find(ip_ptr: *mut NX_IP, port: UINT, free_port_ptr: *mut UINT)
        -> UINT;
}
extern "C" {
    pub fn _nx_udp_info_get(
        ip_ptr: *mut NX_IP,
        udp_packets_sent: *mut ULONG,
        udp_bytes_sent: *mut ULONG,
        udp_packets_received: *mut ULONG,
        udp_bytes_received: *mut ULONG,
        udp_invalid_packets: *mut ULONG,
        udp_receive_packets_dropped: *mut ULONG,
        udp_checksum_errors: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_udp_packet_info_extract(
        packet_ptr: *mut NX_PACKET,
        ip_address: *mut ULONG,
        protocol: *mut UINT,
        port: *mut UINT,
        interface_index: *mut UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_udp_socket_bind(
        socket_ptr: *mut NX_UDP_SOCKET,
        port: UINT,
        wait_option: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_udp_socket_bytes_available(
        socket_ptr: *mut NX_UDP_SOCKET,
        bytes_available: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_udp_socket_checksum_disable(socket_ptr: *mut NX_UDP_SOCKET) -> UINT;
}
extern "C" {
    pub fn _nx_udp_socket_checksum_enable(socket_ptr: *mut NX_UDP_SOCKET) -> UINT;
}
extern "C" {
    pub fn _nx_udp_socket_create(
        ip_ptr: *mut NX_IP,
        socket_ptr: *mut NX_UDP_SOCKET,
        name: *mut CHAR,
        type_of_service: ULONG,
        fragment: ULONG,
        time_to_live: UINT,
        queue_maximum: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_udp_socket_delete(socket_ptr: *mut NX_UDP_SOCKET) -> UINT;
}
extern "C" {
    pub fn _nx_udp_socket_info_get(
        socket_ptr: *mut NX_UDP_SOCKET,
        udp_packets_sent: *mut ULONG,
        udp_bytes_sent: *mut ULONG,
        udp_packets_received: *mut ULONG,
        udp_bytes_received: *mut ULONG,
        udp_packets_queued: *mut ULONG,
        udp_receive_packets_dropped: *mut ULONG,
        udp_checksum_errors: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_udp_socket_port_get(socket_ptr: *mut NX_UDP_SOCKET, port_ptr: *mut UINT) -> UINT;
}
extern "C" {
    pub fn _nx_udp_socket_receive(
        socket_ptr: *mut NX_UDP_SOCKET,
        packet_ptr: *mut *mut NX_PACKET,
        wait_option: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_udp_socket_receive_notify(
        socket_ptr: *mut NX_UDP_SOCKET,
        udp_receive_notify: ::core::option::Option<unsafe extern "C" fn(arg1: *mut NX_UDP_SOCKET)>,
    ) -> UINT;
}
extern "C" {
    pub fn _nxd_udp_socket_send(
        socket_ptr: *mut NX_UDP_SOCKET,
        packet_ptr: *mut NX_PACKET,
        ip_address: *mut NXD_ADDRESS,
        port: UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nxd_udp_socket_source_send(
        socket_ptr: *mut NX_UDP_SOCKET,
        packet_ptr: *mut NX_PACKET,
        ip_address: *mut NXD_ADDRESS,
        port: UINT,
        address_index: UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_udp_socket_unbind(socket_ptr: *mut NX_UDP_SOCKET) -> UINT;
}
extern "C" {
    pub fn _nx_udp_source_extract(
        packet_ptr: *mut NX_PACKET,
        ip_address: *mut ULONG,
        port: *mut UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_udp_socket_vlan_priority_set(
        socket_ptr: *mut NX_UDP_SOCKET,
        vlan_priority: UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nxd_udp_source_extract(
        packet_ptr: *mut NX_PACKET,
        ip_address: *mut NXD_ADDRESS,
        port: *mut UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_udp_socket_send(
        socket_ptr: *mut NX_UDP_SOCKET,
        packet_ptr: *mut NX_PACKET,
        ip_address: ULONG,
        port: UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_udp_socket_source_send(
        socket_ptr: *mut NX_UDP_SOCKET,
        packet_ptr: *mut NX_PACKET,
        ip_address: ULONG,
        port: UINT,
        address_index: UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nxd_udp_packet_info_extract(
        packet_ptr: *mut NX_PACKET,
        ip_address: *mut NXD_ADDRESS,
        protocol: *mut UINT,
        port: *mut UINT,
        interface_index: *mut UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_system_initialize();
}
extern "C" {
    pub fn _nx_http_proxy_client_enable(
        ip_ptr: *mut NX_IP,
        proxy_server_ip: *mut NXD_ADDRESS,
        proxy_server_port: UINT,
        username: *mut UCHAR,
        username_length: UINT,
        password: *mut UCHAR,
        password_length: UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_ip_driver_deferred_enable(
        ip_ptr: *mut NX_IP,
        driver_deferred_packet_handler: ::core::option::Option<
            unsafe extern "C" fn(ip_ptr: *mut NX_IP, packet_ptr: *mut NX_PACKET),
        >,
    );
}
extern "C" {
    pub fn _nx_ip_driver_deferred_receive(ip_ptr: *mut NX_IP, packet_ptr: *mut NX_PACKET);
}
extern "C" {
    pub fn _nx_ip_driver_deferred_processing(ip_ptr: *mut NX_IP);
}
extern "C" {
    pub fn _nx_ip_packet_deferred_receive(ip_ptr: *mut NX_IP, packet_ptr: *mut NX_PACKET);
}
extern "C" {
    pub fn _nx_arp_packet_deferred_receive(ip_ptr: *mut NX_IP, packet_ptr: *mut NX_PACKET);
}
extern "C" {
    pub fn _nx_rarp_packet_deferred_receive(ip_ptr: *mut NX_IP, packet_ptr: *mut NX_PACKET);
}
extern "C" {
    pub fn _nx_ip_packet_receive(ip_ptr: *mut NX_IP, packet_ptr: *mut NX_PACKET);
}
extern "C" {
    pub fn _nx_ip_driver_link_status_event(ip_ptr: *mut NX_IP, interface_index: UINT);
}
extern "C" {
    pub fn _nx_utility_string_length_check(
        input_string: *mut CHAR,
        string_length: *mut UINT,
        max_string_length: UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_utility_string_to_uint(
        input_string: *mut CHAR,
        string_length: UINT,
        number: *mut UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_utility_uint_to_string(
        number: UINT,
        base: UINT,
        string_buffer: *mut CHAR,
        string_buffer_size: UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_utility_base64_encode(
        name: *mut UCHAR,
        name_size: UINT,
        base64name: *mut UCHAR,
        base64name_size: UINT,
        bytes_copied: *mut UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_utility_base64_decode(
        base64name: *mut UCHAR,
        base64name_size: UINT,
        name: *mut UCHAR,
        name_size: UINT,
        bytes_copied: *mut UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_udp_bind_cleanup(thread_ptr: *mut TX_THREAD, suspension_sequence: ULONG);
}
extern "C" {
    pub fn _nx_udp_packet_receive(ip_ptr: *mut NX_IP, packet_ptr: *mut NX_PACKET);
}
extern "C" {
    pub fn _nx_udp_receive_cleanup(thread_ptr: *mut TX_THREAD, suspension_sequence: ULONG);
}
extern "C" {
    pub fn _nxde_udp_socket_source_send(
        socket_ptr: *mut NX_UDP_SOCKET,
        packet_ptr: *mut NX_PACKET,
        ip_address: *mut NXD_ADDRESS,
        port: UINT,
        address_index: UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nxe_udp_enable(ip_ptr: *mut NX_IP) -> UINT;
}
extern "C" {
    pub fn _nxe_udp_free_port_find(
        ip_ptr: *mut NX_IP,
        port: UINT,
        free_port_ptr: *mut UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nxe_udp_info_get(
        ip_ptr: *mut NX_IP,
        udp_packets_sent: *mut ULONG,
        udp_bytes_sent: *mut ULONG,
        udp_packets_received: *mut ULONG,
        udp_bytes_received: *mut ULONG,
        udp_invalid_packets: *mut ULONG,
        udp_receive_packets_dropped: *mut ULONG,
        udp_checksum_errors: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nxe_udp_socket_bind(
        socket_ptr: *mut NX_UDP_SOCKET,
        port: UINT,
        wait_option: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nxe_udp_socket_bytes_available(
        socket_ptr: *mut NX_UDP_SOCKET,
        bytes_available: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nxe_udp_socket_checksum_disable(socket_ptr: *mut NX_UDP_SOCKET) -> UINT;
}
extern "C" {
    pub fn _nxe_udp_socket_checksum_enable(socket_ptr: *mut NX_UDP_SOCKET) -> UINT;
}
extern "C" {
    pub fn _nxe_udp_socket_create(
        ip_ptr: *mut NX_IP,
        socket_ptr: *mut NX_UDP_SOCKET,
        name: *mut CHAR,
        type_of_service: ULONG,
        fragment: ULONG,
        time_to_live: UINT,
        queue_maximum: ULONG,
        udp_socket_size: UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nxe_udp_socket_delete(socket_ptr: *mut NX_UDP_SOCKET) -> UINT;
}
extern "C" {
    pub fn _nxe_udp_source_extract(
        packet_ptr: *mut NX_PACKET,
        ip_address: *mut ULONG,
        port: *mut UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nxe_udp_socket_vlan_priority_set(
        socket_ptr: *mut NX_UDP_SOCKET,
        vlan_priority: UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nxde_udp_source_extract(
        packet_ptr: *mut NX_PACKET,
        ip_address: *mut NXD_ADDRESS,
        port: *mut UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nxe_udp_socket_info_get(
        socket_ptr: *mut NX_UDP_SOCKET,
        udp_packets_sent: *mut ULONG,
        udp_bytes_sent: *mut ULONG,
        udp_packets_received: *mut ULONG,
        udp_bytes_received: *mut ULONG,
        udp_packets_queued: *mut ULONG,
        udp_receive_packets_dropped: *mut ULONG,
        udp_checksum_errors: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nxe_udp_socket_port_get(socket_ptr: *mut NX_UDP_SOCKET, port_ptr: *mut UINT) -> UINT;
}
extern "C" {
    pub fn _nxe_udp_socket_receive(
        socket_ptr: *mut NX_UDP_SOCKET,
        packet_ptr: *mut *mut NX_PACKET,
        wait_option: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nxe_udp_socket_receive_notify(
        socket_ptr: *mut NX_UDP_SOCKET,
        udp_receive_notify: ::core::option::Option<
            unsafe extern "C" fn(socket_ptr: *mut NX_UDP_SOCKET),
        >,
    ) -> UINT;
}
extern "C" {
    pub fn _nxe_udp_socket_source_send(
        socket_ptr: *mut NX_UDP_SOCKET,
        packet_ptr: *mut *mut NX_PACKET,
        ip_address: ULONG,
        port: UINT,
        source_index: UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nxe_udp_socket_send(
        socket_ptr: *mut NX_UDP_SOCKET,
        packet_ptr_ptr: *mut *mut NX_PACKET,
        ip_address: ULONG,
        port: UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nxe_udp_socket_unbind(socket_ptr: *mut NX_UDP_SOCKET) -> UINT;
}
extern "C" {
    pub fn _nxde_udp_packet_info_extract(
        packet_ptr: *mut NX_PACKET,
        ip_address: *mut NXD_ADDRESS,
        protocol: *mut UINT,
        port: *mut UINT,
        interface_index: *mut UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nxe_udp_packet_info_extract(
        packet_ptr: *mut NX_PACKET,
        ip_address: *mut ULONG,
        protocol: *mut UINT,
        port: *mut UINT,
        interface_index: *mut UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nxde_udp_socket_send(
        socket_ptr: *mut NX_UDP_SOCKET,
        packet_ptr: *mut *mut NX_PACKET,
        ip_address: *mut NXD_ADDRESS,
        port: UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_ip_forward_packet_process(ip_ptr: *mut NX_IP, packet_ptr: *mut NX_PACKET);
}
extern "C" {
    pub fn _nx_ip_fragment_forward_packet(
        ip_ptr: *mut NX_IP,
        packet_ptr: *mut NX_PACKET,
        destination_ip: ULONG,
        fragment: ULONG,
        next_hop_address: ULONG,
    );
}
extern "C" {
    pub fn _nx_ip_packet_send(
        ip_ptr: *mut NX_IP,
        packet_ptr: *mut NX_PACKET,
        destination_ip: ULONG,
        type_of_service: ULONG,
        time_to_live: ULONG,
        protocol: ULONG,
        fragment: ULONG,
        next_hop_address: ULONG,
    );
}
extern "C" {
    pub fn _nx_ip_header_add(
        ip_ptr: *mut NX_IP,
        packet_ptr: *mut NX_PACKET,
        source_ip: ULONG,
        destination_ip: ULONG,
        type_of_service: ULONG,
        time_to_live: ULONG,
        protocol: ULONG,
        fragment: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_ip_driver_packet_send(
        ip_ptr: *mut NX_IP,
        packet_ptr: *mut NX_PACKET,
        destination_ip: ULONG,
        fragment: ULONG,
        next_hop_address: ULONG,
    );
}
extern "C" {
    pub fn _nx_ip_route_find(
        ip_ptr: *mut NX_IP,
        destination_address: ULONG,
        nx_ip_interface: *mut *mut NX_INTERFACE,
        next_hop_address: *mut ULONG,
    ) -> ULONG;
}
extern "C" {
    pub fn _nx_ipv4_packet_receive(ip_ptr: *mut NX_IP, packet_ptr: *mut NX_PACKET);
}
extern "C" {
    pub fn _nx_ipv4_option_process(ip_ptr: *mut NX_IP, packet_ptr: *mut NX_PACKET) -> UINT;
}
extern "C" {
    pub fn _nxe_ip_address_change_notify(
        ip_ptr: *mut NX_IP,
        ip_address_change_notify: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut NX_IP, arg2: *mut ::core::ffi::c_void),
        >,
        additional_info: *mut ::core::ffi::c_void,
    ) -> UINT;
}
extern "C" {
    pub fn _nxe_ip_address_get(
        ip_ptr: *mut NX_IP,
        ip_address: *mut ULONG,
        network_mask: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nxe_ip_address_set(ip_ptr: *mut NX_IP, ip_address: ULONG, network_mask: ULONG) -> UINT;
}
extern "C" {
    pub fn _nxe_ip_interface_address_get(
        ip_ptr: *mut NX_IP,
        interface_index: UINT,
        ip_address: *mut ULONG,
        network_mask: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nxe_ip_interface_address_set(
        ip_ptr: *mut NX_IP,
        interface_index: UINT,
        ip_address: ULONG,
        network_mask: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nxe_ip_gateway_address_set(ip_ptr: *mut NX_IP, ip_address: ULONG) -> UINT;
}
extern "C" {
    pub fn _nxe_ip_gateway_address_get(ip_ptr: *mut NX_IP, ip_address: *mut ULONG) -> UINT;
}
extern "C" {
    pub fn _nxe_ip_gateway_address_clear(ip_ptr: *mut NX_IP) -> UINT;
}
extern "C" {
    pub fn _nxe_ip_raw_packet_send(
        ip_ptr: *mut NX_IP,
        packet_ptr_ptr: *mut *mut NX_PACKET,
        destination_ip: ULONG,
        type_of_service: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nxe_ip_raw_packet_source_send(
        ip_ptr: *mut NX_IP,
        packet_ptr_ptr: *mut *mut NX_PACKET,
        destination_ip: ULONG,
        address_index: UINT,
        type_of_service: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nxe_ip_static_route_add(
        ip_ptr: *mut NX_IP,
        network_address: ULONG,
        net_mask: ULONG,
        next_hop: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nxe_ip_static_route_delete(
        ip_ptr: *mut NX_IP,
        network_address: ULONG,
        net_mask: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nxe_ipv4_multicast_interface_join(
        ip_ptr: *mut NX_IP,
        group_address: ULONG,
        interface_index: UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nxe_ipv4_multicast_interface_leave(
        ip_ptr: *mut NX_IP,
        group_address: ULONG,
        interface_index: UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_ip_checksum_compute(
        packet_ptr: *mut NX_PACKET,
        protocol: ULONG,
        data_length: UINT,
        _src_ip_addr: *mut ULONG,
        _dest_ip_addr: *mut ULONG,
    ) -> USHORT;
}
extern "C" {
    pub fn _nx_ip_delete_queue_clear(head_ptr: *mut NX_PACKET);
}
extern "C" {
    pub fn _nx_ip_deferred_link_status_process(ip_ptr: *mut NX_IP);
}
extern "C" {
    pub fn _nx_ip_initialize();
}
extern "C" {
    pub fn _nx_ip_periodic_timer_entry(ip_address: ULONG);
}
extern "C" {
    pub fn _nx_ip_thread_entry(ip_ptr_value: ULONG);
}
extern "C" {
    pub fn _nx_ip_raw_packet_cleanup(thread_ptr: *mut TX_THREAD, suspension_sequence: ULONG);
}
extern "C" {
    pub fn _nx_ip_raw_packet_processing(
        ip_ptr: *mut NX_IP,
        protocol: ULONG,
        packet_ptr: *mut NX_PACKET,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_ip_fragment_timeout_check(ip_ptr: *mut NX_IP);
}
extern "C" {
    pub fn _nx_ip_fragment_packet(driver_req_ptr: *mut NX_IP_DRIVER_STRUCT);
}
extern "C" {
    pub fn _nx_ip_fragment_assembly(ip_ptr: *mut NX_IP);
}
extern "C" {
    pub fn _nxe_ip_create(
        ip_ptr: *mut NX_IP,
        name: *mut CHAR,
        ip_address: ULONG,
        network_mask: ULONG,
        default_pool: *mut NX_PACKET_POOL,
        ip_link_driver: ::core::option::Option<unsafe extern "C" fn(arg1: *mut NX_IP_DRIVER)>,
        memory_ptr: *mut ::core::ffi::c_void,
        memory_size: ULONG,
        priority: UINT,
        ip_control_block_size: UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nxe_ip_delete(ip_ptr: *mut NX_IP) -> UINT;
}
extern "C" {
    pub fn _nxe_ip_driver_direct_command(
        ip_ptr: *mut NX_IP,
        command: UINT,
        return_value_ptr: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nxe_ip_driver_interface_direct_command(
        ip_ptr: *mut NX_IP,
        command: UINT,
        interface_index: UINT,
        return_value_ptr: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nxe_ip_auxiliary_packet_pool_set(
        ip_ptr: *mut NX_IP,
        auxiliary_pool: *mut NX_PACKET_POOL,
    ) -> UINT;
}
extern "C" {
    pub fn _nxe_ip_forwarding_disable(ip_ptr: *mut NX_IP) -> UINT;
}
extern "C" {
    pub fn _nxe_ip_forwarding_enable(ip_ptr: *mut NX_IP) -> UINT;
}
extern "C" {
    pub fn _nxe_ip_fragment_disable(ip_ptr: *mut NX_IP) -> UINT;
}
extern "C" {
    pub fn _nxe_ip_fragment_enable(ip_ptr: *mut NX_IP) -> UINT;
}
extern "C" {
    pub fn _nxe_ip_info_get(
        ip_ptr: *mut NX_IP,
        ip_total_packets_sent: *mut ULONG,
        ip_total_bytes_sent: *mut ULONG,
        ip_total_packets_received: *mut ULONG,
        ip_total_bytes_received: *mut ULONG,
        ip_invalid_packets: *mut ULONG,
        ip_receive_packets_dropped: *mut ULONG,
        ip_receive_checksum_errors: *mut ULONG,
        ip_send_packets_dropped: *mut ULONG,
        ip_total_fragments_sent: *mut ULONG,
        ip_total_fragments_received: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nxe_ip_interface_attach(
        ip_ptr: *mut NX_IP,
        interface_name: *mut CHAR,
        ip_address: ULONG,
        network_mask: ULONG,
        ip_link_driver: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut NX_IP_DRIVER_STRUCT),
        >,
    ) -> UINT;
}
extern "C" {
    pub fn _nxe_ip_interface_detach(ip_ptr: *mut NX_IP, index: UINT) -> UINT;
}
extern "C" {
    pub fn _nxe_ip_max_payload_size_find(
        ip_ptr: *mut NX_IP,
        dest_address: *mut NXD_ADDRESS,
        if_index: UINT,
        src_port: UINT,
        dest_port: UINT,
        protocol: ULONG,
        start_offset_ptr: *mut ULONG,
        payload_length_ptr: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nxe_ip_raw_packet_disable(ip_ptr: *mut NX_IP) -> UINT;
}
extern "C" {
    pub fn _nxe_ip_raw_packet_enable(ip_ptr: *mut NX_IP) -> UINT;
}
extern "C" {
    pub fn _nxe_ip_raw_packet_receive(
        ip_ptr: *mut NX_IP,
        packet_ptr: *mut *mut NX_PACKET,
        wait_option: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nxde_ip_raw_packet_source_send(
        ip_ptr: *mut NX_IP,
        packet_ptr: *mut NX_PACKET,
        destination_ip: *mut NXD_ADDRESS,
        address_index: UINT,
        protocol: ULONG,
        ttl: UINT,
        tos: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nxe_ip_status_check(
        ip_ptr: *mut NX_IP,
        needed_status: ULONG,
        actual_status: *mut ULONG,
        wait_option: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nxe_ip_link_status_change_notify_set(
        ip_ptr: *mut NX_IP,
        link_status_change_notify: ::core::option::Option<
            unsafe extern "C" fn(ip_ptr: *mut NX_IP, interface_index: UINT, link_up: UINT),
        >,
    ) -> UINT;
}
extern "C" {
    pub fn _nxe_ip_interface_address_mapping_configure(
        ip_ptr: *mut NX_IP,
        interface_index: UINT,
        mapping_needed: UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nxe_ip_interface_capability_get(
        ip_ptr: *mut NX_IP,
        interface_index: UINT,
        interface_capability_flag: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nxe_ip_interface_capability_set(
        ip_ptr: *mut NX_IP,
        interface_index: UINT,
        interface_capability_flag: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nxe_ip_interface_info_get(
        ip_ptr: *mut NX_IP,
        interface_index: UINT,
        interface_name: *mut *mut CHAR,
        ip_address: *mut ULONG,
        network_mask: *mut ULONG,
        mtu_size: *mut ULONG,
        physical_address_msw: *mut ULONG,
        physical_address_lsw: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nxe_ip_interface_mtu_set(
        ip_ptr: *mut NX_IP,
        interface_index: UINT,
        mtu_size: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nxe_ip_interface_physical_address_get(
        ip_ptr: *mut NX_IP,
        interface_index: UINT,
        physical_msw: *mut ULONG,
        physical_lsw: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nxe_ip_interface_physical_address_set(
        ip_ptr: *mut NX_IP,
        interface_index: UINT,
        physical_msw: ULONG,
        physical_lsw: ULONG,
        update_driver: UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nxe_ip_interface_status_check(
        ip_ptr: *mut NX_IP,
        interface_index: UINT,
        needed_status: ULONG,
        actual_status: *mut ULONG,
        wait_option: ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nxe_ip_raw_packet_filter_set(
        ip_ptr: *mut NX_IP,
        raw_packet_filter: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut NX_IP, arg2: ULONG, arg3: *mut NX_PACKET) -> UINT,
        >,
    ) -> UINT;
}
extern "C" {
    pub fn _nxe_ip_raw_receive_queue_max_set(ip_ptr: *mut NX_IP, queue_max: ULONG) -> UINT;
}
extern "C" {
    pub fn _nx_ip_fast_periodic_timer_create(ip_ptr: *mut NX_IP);
}
extern "C" {
    pub fn _nx_ip_dispatch_process(
        ip_ptr: *mut NX_IP,
        packet_ptr: *mut NX_PACKET,
        protocol: UINT,
    ) -> UINT;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NX_DHCP_INTERFACE_RECORD_STRUCT {
    pub nx_dhcp_record_valid: UCHAR,
    pub nx_dhcp_state: UCHAR,
    pub nx_dhcp_user_option: UCHAR,
    pub reserved: UCHAR,
    pub nx_dhcp_xid: ULONG,
    pub nx_dhcp_seconds: ULONG,
    pub nx_dhcp_ip_address: ULONG,
    pub nx_dhcp_gateway_address: ULONG,
    pub nx_dhcp_server_ip: ULONG,
    pub nx_dhcp_network_mask: ULONG,
    pub nx_dhcp_interface_index: UINT,
    pub nx_dhcp_timeout: ULONG,
    pub nx_dhcp_rtr_interval: ULONG,
    pub nx_dhcp_lease_remain_time: ULONG,
    pub nx_dhcp_lease_time: ULONG,
    pub nx_dhcp_renewal_time: ULONG,
    pub nx_dhcp_rebind_time: ULONG,
    pub nx_dhcp_renewal_remain_time: ULONG,
    pub nx_dhcp_rebind_remain_time: ULONG,
    pub nx_dhcp_clear_broadcast: UINT,
    pub nx_dhcp_skip_discovery: UINT,
    pub nx_dhcp_options_buffer: [UCHAR; 312usize],
    pub nx_dhcp_options_size: UINT,
    pub nx_dhcp_internal_errors: ULONG,
    pub nx_dhcp_discoveries_sent: ULONG,
    pub nx_dhcp_offers_received: ULONG,
    pub nx_dhcp_requests_sent: ULONG,
    pub nx_dhcp_acks_received: ULONG,
    pub nx_dhcp_nacks_received: ULONG,
    pub nx_dhcp_releases_sent: ULONG,
    pub nx_dhcp_declines_sent: ULONG,
    pub nx_dhcp_force_renewal_rec: ULONG,
    pub nx_dhcp_informs_sent: ULONG,
    pub nx_dhcp_inform_responses: ULONG,
}
pub type NX_DHCP_INTERFACE_RECORD = NX_DHCP_INTERFACE_RECORD_STRUCT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NX_DHCP_STRUCT {
    pub nx_dhcp_id: ULONG,
    pub nx_dhcp_name: *mut CHAR,
    pub nx_dhcp_ip_ptr: *mut NX_IP,
    pub nx_dhcp_pool: NX_PACKET_POOL,
    pub nx_dhcp_pool_area: [UCHAR; 3100usize],
    pub nx_dhcp_packet_pool_ptr: *mut NX_PACKET_POOL,
    pub nx_dhcp_socket: NX_UDP_SOCKET,
    pub nx_dhcp_thread: TX_THREAD,
    pub nx_dhcp_thread_stack: [UCHAR; 4096usize],
    pub nx_dhcp_mutex: TX_MUTEX,
    pub nx_dhcp_events: TX_EVENT_FLAGS_GROUP,
    pub nx_dhcp_timer: TX_TIMER,
    pub nx_dhcp_interface_record: [NX_DHCP_INTERFACE_RECORD; 1usize],
    pub nx_dhcp_user_request_parameter: [UCHAR; 4usize],
    pub nx_dhcp_user_request_parameter_size: UINT,
    pub nx_dhcp_state_change_callback: ::core::option::Option<
        unsafe extern "C" fn(dhcp_ptr: *mut NX_DHCP_STRUCT, new_state: UCHAR),
    >,
    pub nx_dhcp_interface_state_change_callback: ::core::option::Option<
        unsafe extern "C" fn(dhcp_ptr: *mut NX_DHCP_STRUCT, iface_index: UINT, new_state: UCHAR),
    >,
    pub nx_dhcp_user_option_add: ::core::option::Option<
        unsafe extern "C" fn(
            dhcp_ptr: *mut NX_DHCP_STRUCT,
            iface_index: UINT,
            message_type: UINT,
            user_option_ptr: *mut UCHAR,
            user_option_length: *mut UINT,
        ) -> UINT,
    >,
    pub nx_dhcp_created_next: *mut NX_DHCP_STRUCT,
    pub nx_dhcp_reserved_ptr: *mut ::core::ffi::c_void,
}
pub type NX_DHCP = NX_DHCP_STRUCT;
extern "C" {
    pub fn _nx_dhcp_create(dhcp_ptr: *mut NX_DHCP, ip_ptr: *mut NX_IP, name_ptr: *mut CHAR)
        -> UINT;
}
extern "C" {
    pub fn _nx_dhcp_packet_pool_set(
        dhcp_ptr: *mut NX_DHCP,
        packet_pool_ptr: *mut NX_PACKET_POOL,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_dhcp_request_client_ip(
        dhcp_ptr: *mut NX_DHCP,
        client_ip_address: ULONG,
        skip_discover_message: UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_dhcp_delete(dhcp_ptr: *mut NX_DHCP) -> UINT;
}
extern "C" {
    pub fn _nx_dhcp_decline(dhcp_ptr: *mut NX_DHCP) -> UINT;
}
extern "C" {
    pub fn _nx_dhcp_force_renew(dhcp_ptr: *mut NX_DHCP) -> UINT;
}
extern "C" {
    pub fn _nx_dhcp_release(dhcp_ptr: *mut NX_DHCP) -> UINT;
}
extern "C" {
    pub fn _nx_dhcp_start(dhcp_ptr: *mut NX_DHCP) -> UINT;
}
extern "C" {
    pub fn _nx_dhcp_stop(dhcp_ptr: *mut NX_DHCP) -> UINT;
}
extern "C" {
    pub fn _nx_dhcp_server_address_get(dhcp_ptr: *mut NX_DHCP, server_address: *mut ULONG) -> UINT;
}
extern "C" {
    pub fn _nx_dhcp_state_change_notify(
        dhcp_ptr: *mut NX_DHCP,
        dhcp_state_change_notify: ::core::option::Option<
            unsafe extern "C" fn(dhcp_ptr: *mut NX_DHCP, new_state: UCHAR),
        >,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_dhcp_user_option_request(dhcp_ptr: *mut NX_DHCP, option_code: UINT) -> UINT;
}
extern "C" {
    pub fn _nx_dhcp_user_option_retrieve(
        dhcp_ptr: *mut NX_DHCP,
        request_option: UINT,
        destination_ptr: *mut UCHAR,
        destination_size: *mut UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_dhcp_user_option_convert(source_ptr: *mut UCHAR) -> ULONG;
}
extern "C" {
    pub fn _nx_dhcp_user_option_add_callback_set(
        dhcp_ptr: *mut NX_DHCP,
        dhcp_user_option_add: ::core::option::Option<
            unsafe extern "C" fn(
                dhcp_ptr: *mut NX_DHCP,
                iface_index: UINT,
                message_type: UINT,
                user_option_ptr: *mut UCHAR,
                user_option_length: *mut UINT,
            ) -> UINT,
        >,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_dhcp_reinitialize(dhcp_ptr: *mut NX_DHCP) -> UINT;
}
extern "C" {
    pub fn _nx_dhcp_send_request(dhcp_ptr: *mut NX_DHCP, dhcp_message_type: UINT) -> UINT;
}
extern "C" {
    pub fn _nx_dhcp_set_interface_index(dhcp_ptr: *mut NX_DHCP, interface_index: UINT) -> UINT;
}
extern "C" {
    pub fn _nx_dhcp_clear_broadcast_flag(dhcp_ptr: *mut NX_DHCP, clear_flag: UINT) -> UINT;
}
extern "C" {
    pub fn _nx_dhcp_interface_clear_broadcast_flag(
        dhcp_ptr: *mut NX_DHCP,
        iface_index: UINT,
        clear_flag: UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_dhcp_interface_enable(dhcp_ptr: *mut NX_DHCP, iface_index: UINT) -> UINT;
}
extern "C" {
    pub fn _nx_dhcp_interface_disable(dhcp_ptr: *mut NX_DHCP, iface_index: UINT) -> UINT;
}
extern "C" {
    pub fn _nx_dhcp_interface_decline(dhcp_ptr: *mut NX_DHCP, iface_index: UINT) -> UINT;
}
extern "C" {
    pub fn _nx_dhcp_interface_force_renew(dhcp_ptr: *mut NX_DHCP, iface_index: UINT) -> UINT;
}
extern "C" {
    pub fn _nx_dhcp_interface_release(dhcp_ptr: *mut NX_DHCP, iface_index: UINT) -> UINT;
}
extern "C" {
    pub fn _nx_dhcp_interface_reinitialize(dhcp_ptr: *mut NX_DHCP, iface_index: UINT) -> UINT;
}
extern "C" {
    pub fn _nx_dhcp_interface_request_client_ip(
        dhcp_ptr: *mut NX_DHCP,
        iface_index: UINT,
        client_ip_address: ULONG,
        skip_discover_message: UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_dhcp_interface_start(dhcp_ptr: *mut NX_DHCP, iface_index: UINT) -> UINT;
}
extern "C" {
    pub fn _nx_dhcp_interface_stop(dhcp_ptr: *mut NX_DHCP, iface_index: UINT) -> UINT;
}
extern "C" {
    pub fn _nx_dhcp_interface_send_request(
        dhcp_ptr: *mut NX_DHCP,
        iface_index: UINT,
        dhcp_message_type: UINT,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_dhcp_interface_server_address_get(
        dhcp_ptr: *mut NX_DHCP,
        iface_index: UINT,
        server_address: *mut ULONG,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_dhcp_interface_state_change_notify(
        dhcp_ptr: *mut NX_DHCP,
        dhcp_interface_state_change_notify: ::core::option::Option<
            unsafe extern "C" fn(dhcp_ptr: *mut NX_DHCP, iface_index: UINT, new_state: UCHAR),
        >,
    ) -> UINT;
}
extern "C" {
    pub fn _nx_dhcp_interface_user_option_retrieve(
        dhcp_ptr: *mut NX_DHCP,
        iface_index: UINT,
        option_request: UINT,
        destination_ptr: *mut UCHAR,
        destination_size: *mut UINT,
    ) -> UINT;
}
pub const wiced_bool_t_WICED_FALSE: wiced_bool_t = 0;
pub const wiced_bool_t_WICED_TRUE: wiced_bool_t = 1;
pub type wiced_bool_t = ::core::ffi::c_uint;
pub const wwd_result_t_WWD_SUCCESS: wwd_result_t = 0;
pub const wwd_result_t_WWD_PENDING: wwd_result_t = 1;
pub const wwd_result_t_WWD_TIMEOUT: wwd_result_t = 2;
pub const wwd_result_t_WWD_BADARG: wwd_result_t = 5;
pub const wwd_result_t_WWD_UNFINISHED: wwd_result_t = 10;
pub const wwd_result_t_WWD_PARTIAL_RESULTS: wwd_result_t = 1003;
pub const wwd_result_t_WWD_INVALID_KEY: wwd_result_t = 1004;
pub const wwd_result_t_WWD_DOES_NOT_EXIST: wwd_result_t = 1005;
pub const wwd_result_t_WWD_NOT_AUTHENTICATED: wwd_result_t = 1006;
pub const wwd_result_t_WWD_NOT_KEYED: wwd_result_t = 1007;
pub const wwd_result_t_WWD_IOCTL_FAIL: wwd_result_t = 1008;
pub const wwd_result_t_WWD_BUFFER_UNAVAILABLE_TEMPORARY: wwd_result_t = 1009;
pub const wwd_result_t_WWD_BUFFER_UNAVAILABLE_PERMANENT: wwd_result_t = 1010;
pub const wwd_result_t_WWD_CONNECTION_LOST: wwd_result_t = 1012;
pub const wwd_result_t_WWD_OUT_OF_EVENT_HANDLER_SPACE: wwd_result_t = 1013;
pub const wwd_result_t_WWD_SEMAPHORE_ERROR: wwd_result_t = 1014;
pub const wwd_result_t_WWD_FLOW_CONTROLLED: wwd_result_t = 1015;
pub const wwd_result_t_WWD_NO_CREDITS: wwd_result_t = 1016;
pub const wwd_result_t_WWD_NO_PACKET_TO_SEND: wwd_result_t = 1017;
pub const wwd_result_t_WWD_CORE_CLOCK_NOT_ENABLED: wwd_result_t = 1018;
pub const wwd_result_t_WWD_CORE_IN_RESET: wwd_result_t = 1019;
pub const wwd_result_t_WWD_UNSUPPORTED: wwd_result_t = 1020;
pub const wwd_result_t_WWD_BUS_WRITE_REGISTER_ERROR: wwd_result_t = 1021;
pub const wwd_result_t_WWD_SDIO_BUS_UP_FAIL: wwd_result_t = 1022;
pub const wwd_result_t_WWD_JOIN_IN_PROGRESS: wwd_result_t = 1023;
pub const wwd_result_t_WWD_NETWORK_NOT_FOUND: wwd_result_t = 1024;
pub const wwd_result_t_WWD_INVALID_JOIN_STATUS: wwd_result_t = 1025;
pub const wwd_result_t_WWD_UNKNOWN_INTERFACE: wwd_result_t = 1026;
pub const wwd_result_t_WWD_SDIO_RX_FAIL: wwd_result_t = 1027;
pub const wwd_result_t_WWD_HWTAG_MISMATCH: wwd_result_t = 1028;
pub const wwd_result_t_WWD_RX_BUFFER_ALLOC_FAIL: wwd_result_t = 1029;
pub const wwd_result_t_WWD_BUS_READ_REGISTER_ERROR: wwd_result_t = 1030;
pub const wwd_result_t_WWD_THREAD_CREATE_FAILED: wwd_result_t = 1031;
pub const wwd_result_t_WWD_QUEUE_ERROR: wwd_result_t = 1032;
pub const wwd_result_t_WWD_BUFFER_POINTER_MOVE_ERROR: wwd_result_t = 1033;
pub const wwd_result_t_WWD_BUFFER_SIZE_SET_ERROR: wwd_result_t = 1034;
pub const wwd_result_t_WWD_THREAD_STACK_NULL: wwd_result_t = 1035;
pub const wwd_result_t_WWD_THREAD_DELETE_FAIL: wwd_result_t = 1036;
pub const wwd_result_t_WWD_SLEEP_ERROR: wwd_result_t = 1037;
pub const wwd_result_t_WWD_BUFFER_ALLOC_FAIL: wwd_result_t = 1038;
pub const wwd_result_t_WWD_NO_PACKET_TO_RECEIVE: wwd_result_t = 1039;
pub const wwd_result_t_WWD_INTERFACE_NOT_UP: wwd_result_t = 1040;
pub const wwd_result_t_WWD_DELAY_TOO_LONG: wwd_result_t = 1041;
pub const wwd_result_t_WWD_INVALID_DUTY_CYCLE: wwd_result_t = 1042;
pub const wwd_result_t_WWD_PMK_WRONG_LENGTH: wwd_result_t = 1043;
pub const wwd_result_t_WWD_UNKNOWN_SECURITY_TYPE: wwd_result_t = 1044;
pub const wwd_result_t_WWD_WEP_NOT_ALLOWED: wwd_result_t = 1045;
pub const wwd_result_t_WWD_WPA_KEYLEN_BAD: wwd_result_t = 1046;
pub const wwd_result_t_WWD_FILTER_NOT_FOUND: wwd_result_t = 1047;
pub const wwd_result_t_WWD_SPI_ID_READ_FAIL: wwd_result_t = 1048;
pub const wwd_result_t_WWD_SPI_SIZE_MISMATCH: wwd_result_t = 1049;
pub const wwd_result_t_WWD_ADDRESS_ALREADY_REGISTERED: wwd_result_t = 1050;
pub const wwd_result_t_WWD_SDIO_RETRIES_EXCEEDED: wwd_result_t = 1051;
pub const wwd_result_t_WWD_NULL_PTR_ARG: wwd_result_t = 1052;
pub const wwd_result_t_WWD_THREAD_FINISH_FAIL: wwd_result_t = 1053;
pub const wwd_result_t_WWD_WAIT_ABORTED: wwd_result_t = 1054;
pub const wwd_result_t_WWD_SET_BLOCK_ACK_WINDOW_FAIL: wwd_result_t = 1055;
pub const wwd_result_t_WWD_DELAY_TOO_SHORT: wwd_result_t = 1056;
pub const wwd_result_t_WWD_INVALID_INTERFACE: wwd_result_t = 1057;
pub const wwd_result_t_WWD_WEP_KEYLEN_BAD: wwd_result_t = 1058;
pub const wwd_result_t_WWD_HANDLER_ALREADY_REGISTERED: wwd_result_t = 1059;
pub const wwd_result_t_WWD_AP_ALREADY_UP: wwd_result_t = 1060;
pub const wwd_result_t_WWD_EAPOL_KEY_PACKET_M1_TIMEOUT: wwd_result_t = 1061;
pub const wwd_result_t_WWD_EAPOL_KEY_PACKET_M3_TIMEOUT: wwd_result_t = 1062;
pub const wwd_result_t_WWD_EAPOL_KEY_PACKET_G1_TIMEOUT: wwd_result_t = 1063;
pub const wwd_result_t_WWD_EAPOL_KEY_FAILURE: wwd_result_t = 1064;
pub const wwd_result_t_WWD_MALLOC_FAILURE: wwd_result_t = 1065;
pub const wwd_result_t_WWD_ACCESS_POINT_NOT_FOUND: wwd_result_t = 1066;
pub const wwd_result_t_WWD_RTOS_ERROR: wwd_result_t = 1067;
pub const wwd_result_t_WWD_CLM_BLOB_DLOAD_ERROR: wwd_result_t = 1068;
pub const wwd_result_t_WWD_WLAN_ERROR: wwd_result_t = 2001;
pub const wwd_result_t_WWD_WLAN_BADARG: wwd_result_t = 2002;
pub const wwd_result_t_WWD_WLAN_BADOPTION: wwd_result_t = 2003;
pub const wwd_result_t_WWD_WLAN_NOTUP: wwd_result_t = 2004;
pub const wwd_result_t_WWD_WLAN_NOTDOWN: wwd_result_t = 2005;
pub const wwd_result_t_WWD_WLAN_NOTAP: wwd_result_t = 2006;
pub const wwd_result_t_WWD_WLAN_NOTSTA: wwd_result_t = 2007;
pub const wwd_result_t_WWD_WLAN_BADKEYIDX: wwd_result_t = 2008;
pub const wwd_result_t_WWD_WLAN_RADIOOFF: wwd_result_t = 2009;
pub const wwd_result_t_WWD_WLAN_NOTBANDLOCKED: wwd_result_t = 2010;
pub const wwd_result_t_WWD_WLAN_NOCLK: wwd_result_t = 2011;
pub const wwd_result_t_WWD_WLAN_BADRATESET: wwd_result_t = 2012;
pub const wwd_result_t_WWD_WLAN_BADBAND: wwd_result_t = 2013;
pub const wwd_result_t_WWD_WLAN_BUFTOOSHORT: wwd_result_t = 2014;
pub const wwd_result_t_WWD_WLAN_BUFTOOLONG: wwd_result_t = 2015;
pub const wwd_result_t_WWD_WLAN_BUSY: wwd_result_t = 2016;
pub const wwd_result_t_WWD_WLAN_NOTASSOCIATED: wwd_result_t = 2017;
pub const wwd_result_t_WWD_WLAN_BADSSIDLEN: wwd_result_t = 2018;
pub const wwd_result_t_WWD_WLAN_OUTOFRANGECHAN: wwd_result_t = 2019;
pub const wwd_result_t_WWD_WLAN_BADCHAN: wwd_result_t = 2020;
pub const wwd_result_t_WWD_WLAN_BADADDR: wwd_result_t = 2021;
pub const wwd_result_t_WWD_WLAN_NORESOURCE: wwd_result_t = 2022;
pub const wwd_result_t_WWD_WLAN_UNSUPPORTED: wwd_result_t = 2023;
pub const wwd_result_t_WWD_WLAN_BADLEN: wwd_result_t = 2024;
pub const wwd_result_t_WWD_WLAN_NOTREADY: wwd_result_t = 2025;
pub const wwd_result_t_WWD_WLAN_EPERM: wwd_result_t = 2026;
pub const wwd_result_t_WWD_WLAN_NOMEM: wwd_result_t = 2027;
pub const wwd_result_t_WWD_WLAN_ASSOCIATED: wwd_result_t = 2028;
pub const wwd_result_t_WWD_WLAN_RANGE: wwd_result_t = 2029;
pub const wwd_result_t_WWD_WLAN_NOTFOUND: wwd_result_t = 2030;
pub const wwd_result_t_WWD_WLAN_WME_NOT_ENABLED: wwd_result_t = 2031;
pub const wwd_result_t_WWD_WLAN_TSPEC_NOTFOUND: wwd_result_t = 2032;
pub const wwd_result_t_WWD_WLAN_ACM_NOTSUPPORTED: wwd_result_t = 2033;
pub const wwd_result_t_WWD_WLAN_NOT_WME_ASSOCIATION: wwd_result_t = 2034;
pub const wwd_result_t_WWD_WLAN_SDIO_ERROR: wwd_result_t = 2035;
pub const wwd_result_t_WWD_WLAN_WLAN_DOWN: wwd_result_t = 2036;
pub const wwd_result_t_WWD_WLAN_BAD_VERSION: wwd_result_t = 2037;
pub const wwd_result_t_WWD_WLAN_TXFAIL: wwd_result_t = 2038;
pub const wwd_result_t_WWD_WLAN_RXFAIL: wwd_result_t = 2039;
pub const wwd_result_t_WWD_WLAN_NODEVICE: wwd_result_t = 2040;
pub const wwd_result_t_WWD_WLAN_UNFINISHED: wwd_result_t = 2041;
pub const wwd_result_t_WWD_WLAN_NONRESIDENT: wwd_result_t = 2042;
pub const wwd_result_t_WWD_WLAN_DISABLED: wwd_result_t = 2043;
pub type wwd_result_t = ::core::ffi::c_uint;
pub const wiced_country_code_t_WICED_COUNTRY_UNITED_STATES: wiced_country_code_t = 21333;
pub const wiced_country_code_t_WICED_COUNTRY_WORLD_WIDE_XX: wiced_country_code_t = 22616;
pub type wiced_country_code_t = ::core::ffi::c_uint;
pub const wiced_security_t_WICED_SECURITY_OPEN: wiced_security_t = 0;
pub const wiced_security_t_WICED_SECURITY_WEP_SHARED: wiced_security_t = 32769;
pub const wiced_security_t_WICED_SECURITY_WPA_TKIP_PSK: wiced_security_t = 2097154;
pub const wiced_security_t_WICED_SECURITY_WPA2_AES_PSK: wiced_security_t = 4194308;
pub const wiced_security_t_WICED_SECURITY_FORCE_32_BIT: wiced_security_t = 2147483647;
pub type wiced_security_t = ::core::ffi::c_uint;
pub const wwd_interface_t_WWD_STA_INTERFACE: wwd_interface_t = 0;
pub const wwd_interface_t_WWD_AP_INTERFACE: wwd_interface_t = 1;
pub const wwd_interface_t_WWD_P2P_INTERFACE: wwd_interface_t = 2;
pub const wwd_interface_t_WWD_ETHERNET_INTERFACE: wwd_interface_t = 3;
pub const wwd_interface_t_WWD_INTERFACE_MAX: wwd_interface_t = 4;
pub const wwd_interface_t_WWD_INTERFACE_FORCE_32_BIT: wwd_interface_t = 2147483647;
pub type wwd_interface_t = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wiced_ssid_t {
    pub length: u8,
    pub value: [u8; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wiced_mac_t {
    #[doc = "< Unique 6-byte MAC address"]
    pub octet: [u8; 6usize],
}
extern "C" {
    pub fn wwd_management_wifi_on(country: wiced_country_code_t) -> wwd_result_t;
}
extern "C" {
    pub fn wiced_sta_netx_duo_driver_entry(driver: *mut NX_IP_DRIVER);
}
extern "C" {
    pub fn wwd_buffer_init(native_arg: *mut ::core::ffi::c_void) -> wwd_result_t;
}
extern "C" {
    pub fn wwd_wifi_join(
        ssid: *const wiced_ssid_t,
        auth_type: wiced_security_t,
        security_key: *const u8,
        key_length: u8,
        semaphore: *mut TX_SEMAPHORE,
        interface: wwd_interface_t,
    ) -> wwd_result_t;
}
extern "C" {
    pub fn wwd_wifi_leave(interface: wwd_interface_t) -> wwd_result_t;
}
extern "C" {
    pub fn wwd_wifi_join_halt(halt: wiced_bool_t) -> wwd_result_t;
}
extern "C" {
    pub fn wwd_wifi_get_mac_address(
        mac: *mut wiced_mac_t,
        interface: wwd_interface_t,
    ) -> wwd_result_t;
}
extern "C" {
    pub fn wwd_wifi_is_ready_to_transceive(interface: wwd_interface_t) -> wwd_result_t;
}
// Constants extracted from TX_API.H and TX_PORT.H with overridden values
pub const TX_MAX_PRIORITIES : UINT = 32;
pub const TX_MINIMUM_STACK : UINT = 200;
pub const TX_TIMER_THREAD_STACK_SIZE : UINT = 1024;
pub const TX_TIMER_THREAD_PRIORITY : UINT = 0;
pub const TX_INT_DISABLE : UINT = 1;
pub const TX_INT_ENABLE : UINT = 0;
pub const TX_TRACE_TIME_MASK : UINT = 4294967295;
pub const TX_PORT_SPECIFIC_BUILD_OPTIONS : UINT = 0;
pub const TX_TIMER_TICKS_PER_SECOND : UINT = 100;
pub const TX_TRACE_USER_EVENT_START : UINT = 4096;
pub const TX_TRACE_USER_EVENT_END : UINT = 65535;
pub const TX_TRACE_ALL_EVENTS : UINT = 2047;
pub const TX_TRACE_INTERNAL_EVENTS : UINT = 1;
pub const TX_TRACE_BLOCK_POOL_EVENTS : UINT = 2;
pub const TX_TRACE_BYTE_POOL_EVENTS : UINT = 4;
pub const TX_TRACE_EVENT_FLAGS_EVENTS : UINT = 8;
pub const TX_TRACE_INTERRUPT_CONTROL_EVENT : UINT = 16;
pub const TX_TRACE_MUTEX_EVENTS : UINT = 32;
pub const TX_TRACE_QUEUE_EVENTS : UINT = 64;
pub const TX_TRACE_SEMAPHORE_EVENTS : UINT = 128;
pub const TX_TRACE_THREAD_EVENTS : UINT = 256;
pub const TX_TRACE_TIME_EVENTS : UINT = 512;
pub const TX_TRACE_TIMER_EVENTS : UINT = 1024;
pub const TX_TRACE_USER_EVENTS : UINT = 2147483648;
